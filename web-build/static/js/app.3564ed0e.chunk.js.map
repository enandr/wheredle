{"version":3,"sources":["constants/colors.ts","components/button.tsx","screens/home/home.tsx","screens/win-screen/win-screen.tsx","App.tsx","webpack:///./index.js?41f5"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","status","HomeScreen","navigation","useState","modalVisible","setModalVisible","guess","setGuess","guessHistory","gameStatus","setGameStatus","canGuess","setCanGuess","timeTillNewGame","setTimeTillNewGame","totalGuesses","useRef","guessLength","spaceCount","answer","date","id","image","location","setLocation","inputRef","intervalRef","showZoomImageModal","setShowZoomImageModal","getTodaysDate","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","useEffect","fullDate","a","async","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","parsedResponse","getChallengeFromDate","then","result","AsyncStorage","getItem","valueGuesses","valueGameStatus","valueStatus","current","getData","clear","focus","setInterval","now","hoursleft","getHours","minutesleft","getMinutes","secondsleft","getSeconds","split","length","onSubmit","Keyboard","dismiss","guessAccuracy","totalCorrect","currentGuess","toUpperCase","replace","i","push","accuracy","includes","setItem","Alert","alert","onShare","setTimeout","toShare","map","attempt","letter","j","emojis","join","Share","share","message","action","sharedAction","activityType","dismissedAction","gameInputArea","View","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","value","maxLength","editable","onChangeText","slice","onKeyPress","e","keyCode","index","wrong","wrongLocation","correct","blackSquare","gameCompleteArea","textGameOver","correctGameOver","wrongLocationGameOver","textTimeLeftGameOver","SafeAreaView","container","height","ScrollView","paddingHorizontal","TouchableWithoutFeedback","Platform","OS","blur","helpText","Image","width","minHeight","source","uri","Modal","visible","transparent","enableSwipeDown","saveToLocalByLongPress","onSwipeDown","imageUrls","url","animationType","onDismiss","paddingTop","flex","marginBottom","wrongGameOver","WinScreen","correctAnswer","setCa","setTg","setGs","valueAnswer","window","reload","Stack","createStackNavigator","registerRootComponent","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.3564ed0e.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Image,\n  Keyboard,\n  Modal,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  Share,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Button } from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport { GuessableLocation } from \"../../constants/types\";\nimport ImageViewer from \"react-native-image-zoom-viewer\";\n\nconst status = {\n  WON: \"won\",\n  LOST: \"lost\",\n  PENDING: \"pending\",\n};\nexport default function HomeScreen({ navigation }: { navigation: any }) {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [guess, setGuess] = useState(\"\");\n  const [guessHistory, setGuessHistory] = useState<any[]>([]);\n  const [gameStatus, setGameStatus] = useState(status.PENDING);\n  const [canGuess, setCanGuess] = useState(false);\n  const [timeTillNewGame, setTimeTillNewGame] = useState(\"\");\n  const totalGuesses = useRef<any>(0);\n  const guessLength = useRef<number>(0);\n  const spaceCount = useRef<number>(0);\n  const [location, setLocation] = useState<GuessableLocation>({\n    answer: \"\",\n    date: \"\",\n    id: 0,\n    image: \"../../assets/loading.gif\",\n  });\n  const inputRef = useRef<any>();\n  const intervalRef = useRef<any>();\n  const [showZoomImageModal, setShowZoomImageModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueGameStatus = await AsyncStorage.getItem(\"gameStatus\");\n      const valueStatus = await AsyncStorage.getItem(\"lastPlayed\");\n      if (valueGuesses !== null && valueGameStatus !== null) {\n        totalGuesses.current = valueGuesses;\n        setGameStatus(valueGameStatus);\n      }\n      return valueStatus;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const getChallengeFromDate = async (date: string) => {\n    const rawResponse = await fetch(\n      \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/challenges\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ date }),\n      }\n    );\n    const parsedResponse = await rawResponse.json();\n    return parsedResponse[0];\n  };\n\n  const getTodaysDate = () => {\n    const today: Date = new Date();\n    const yyyy: string = today.getFullYear().toString();\n    const month: number = today.getMonth() + 1;\n    const day: number = today.getDate();\n    const mm: string = month < 10 ? \"0\" + month : \"\" + month;\n    const dd: string = day < 10 ? \"0\" + day : \"\" + day;\n    const fullDate = `${mm}/${dd}/${yyyy}`;\n    return fullDate;\n  };\n\n  useEffect(() => {\n    const fullDate = getTodaysDate();\n    getChallengeFromDate(fullDate).then((result: GuessableLocation) => {\n      setLocation(result);\n      getData().then((result) => {\n        if (result !== null && fullDate === result) {\n          return;\n        } else {\n          AsyncStorage.clear();\n        }\n      });\n      inputRef?.current?.focus();\n      intervalRef.current = setInterval(() => {\n        const now = new Date();\n        const hoursleft = 23 - now.getHours();\n        const minutesleft = 59 - now.getMinutes();\n        const secondsleft = 59 - now.getSeconds();\n        let minutesleftString = \"\";\n        let secondsleftString = \"\";\n        minutesleft < 10\n          ? (minutesleftString = \"0\" + minutesleft)\n          : (minutesleftString = \"\" + minutesleft);\n        secondsleft < 10\n          ? (secondsleftString = \"0\" + secondsleft)\n          : (secondsleftString = \"\" + secondsleft);\n        setTimeTillNewGame(\n          `${hoursleft}:${minutesleftString}:${secondsleftString}`\n        );\n      }, 1000);\n    });\n  }, []);\n\n  useEffect(() => {\n    spaceCount.current = guess.split(\" \").length - 1;\n    guessLength.current = guess.length - spaceCount.current;\n    if (guessLength.current === 6 && gameStatus === status.PENDING) {\n      setCanGuess(true);\n    } else {\n      setCanGuess(false);\n    }\n  }, [guess]);\n\n  const onSubmit = () => {\n    Keyboard.dismiss();\n    const guessAccuracy = [];\n    const newGuessHistory = [];\n    let totalCorrect = 0;\n    const currentGuess = guess.toUpperCase().replace(/[^A-Z]/g, \"\");\n    for (let i = 0; i < 6; i++) {\n      if (currentGuess[i] === location?.answer[i]) {\n        guessAccuracy.push({ guess: currentGuess[i], accuracy: \"correct\" });\n        totalCorrect += 1;\n      } else if (location?.answer.includes(guess[i])) {\n        guessAccuracy.push({\n          guess: currentGuess[i],\n          accuracy: \"wrongLocation\",\n        });\n      } else {\n        guessAccuracy.push({ guess: currentGuess[i], accuracy: \"wrong\" });\n      }\n    }\n    guessHistory.push(guessAccuracy);\n    setGuess(\"\");\n    spaceCount.current = 0;\n    guessLength.current = 0;\n    totalGuesses.current += 1;\n    if (totalCorrect === 6) {\n      setGameStatus(status.WON);\n      AsyncStorage.setItem(\"gameStatus\", status.WON);\n      AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n      AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n      AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n      Alert.alert(\n        \"Congrats!!\",\n        `You Won After ${totalGuesses.current} Guesses.`,\n        [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n      );\n      //navigation.navigate('Win');\n      return;\n    }\n    if (totalCorrect !== 6 && totalGuesses.current === 6) {\n      setGameStatus(status.LOST);\n      AsyncStorage.setItem(\"gameStatus\", status.LOST);\n      AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n      AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n      AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n      Alert.alert(\n        \"Better Luck Next Time\",\n        `You Lost After ${totalGuesses.current} Guesses.`,\n        [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n      );\n      //navigation.navigate('Win');\n      return;\n    }\n    setTimeout(() => {\n      if (gameStatus === status.PENDING) {\n        inputRef?.current?.focus();\n      }\n    }, 100);\n  };\n\n  const onShare = async () => {\n    const toShare = guessHistory\n      .map((attempt, i) => {\n        return attempt\n          .map(\n            (\n              letter: {\n                accuracy: \"wrong\" | \"wrongLocation\" | \"correct\";\n                guess: string;\n              },\n              j: number\n            ) => {\n              return emojis[letter.accuracy];\n            }\n          )\n          .join(\"\");\n      })\n      .join(\"\\n\");\n    try {\n      const result = await Share.share({\n        message: toShare,\n      });\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const gameInputArea = (\n    <View>\n      <TextInput\n        ref={inputRef}\n        style={styles.input}\n        placeholder={\"Guess The Location\"}\n        placeholderTextColor={\"#808e9b\"}\n        autoCapitalize={\"characters\"}\n        autoFocus={true}\n        value={guess}\n        maxLength={6 + spaceCount.current}\n        editable={gameStatus === status.PENDING}\n        onChangeText={(value: string) => {\n          value = value\n            .toUpperCase()\n            .slice(0, 6 + spaceCount.current)\n            .replace(/[^A-Z ]/g, \"\");\n          setGuess(value);\n        }}\n        onKeyPress={(e: any) => {\n          if (e.keyCode === 13 && canGuess) {\n            if (guess.length == 6) {\n              onSubmit();\n            } else {\n              setTimeout(() => {\n                inputRef?.current?.focus();\n              }, 100);\n            }\n          }\n        }}\n      />\n      <Button\n        disabled={!canGuess}\n        text={\"Submit\"}\n        onPress={() => {\n          if (guessLength.current === 6 && canGuess) {\n            onSubmit();\n          }\n        }}\n      />\n      <View>\n        {guessHistory.map(\n          (\n            guess: {\n              accuracy: \"correct\" | \"wrongLocation\" | \"wrong\";\n              guess: string;\n            }[],\n            index: number\n          ) => {\n            return (\n              <Text key={index} style={styles.text}>\n                <Text style={styles[guess[0].accuracy]}>{guess[0].guess}</Text>\n                <Text style={styles[guess[1].accuracy]}>{guess[1].guess}</Text>\n                <Text style={styles[guess[2].accuracy]}>{guess[2].guess}</Text>\n                <Text style={styles[guess[3].accuracy]}>{guess[3].guess}</Text>\n                <Text style={styles[guess[4].accuracy]}>{guess[4].guess}</Text>\n                <Text style={styles[guess[5].accuracy]}>{guess[5].guess}</Text>\n              </Text>\n            );\n          }\n        )}\n      </View>\n    </View>\n  );\n\n  const emojis = {\n    wrong: [\"\\u{1F7E5}\"],\n    wrongLocation: [\"\\u{1F7E7}\"],\n    correct: [\"\\u{1F7E9}\"],\n    blackSquare: [\"\\u{2B1B}\"],\n  };\n\n  const gameCompleteArea = (\n    <View style={{ marginTop: 20 }}>\n      <Text style={styles.textGameOver}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.textGameOver}>\n        Correct Answer:\n        <Text style={styles.correctGameOver}>{` ${location?.answer}`}</Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Total Guesses:\n        <Text style={styles.wrongLocationGameOver}>\n          {` ${totalGuesses.current}`}\n        </Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Time To New Game:\n        <Text style={styles.textTimeLeftGameOver}>{` ${timeTillNewGame}`}</Text>\n      </Text>\n      <View style={{ marginTop: 50 }}>\n        <Button text={\"Share Results\"} onPress={onShare} />\n      </View>\n      <View style={{ marginTop: 10 }}>\n        <Button\n          text={\"Clear Data\"}\n          onPress={() => {\n            AsyncStorage.clear();\n          }}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <View style={{ height: \"100%\" }}>\n        <ScrollView style={{ paddingHorizontal: 20 }}>\n          <TouchableWithoutFeedback\n            onPress={() => {\n              if (Platform.OS === \"web\") {\n                inputRef?.current?.focus();\n              } else {\n                inputRef?.current?.blur();\n              }\n            }}\n          >\n            <View style={[styles.container]}>\n              <TouchableOpacity\n                onPress={() => {\n                  setModalVisible(true);\n                }}\n              >\n                <Text style={styles.helpText}>How To Play?</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                onPress={() => {\n                  setShowZoomImageModal(true);\n                }}\n              >\n                <Image\n                  style={{ width: \"100%\", minHeight: 300 }}\n                  source={{ uri: location?.image }}\n                />\n              </TouchableOpacity>\n\n              <Modal visible={showZoomImageModal} transparent={true}>\n                <ImageViewer\n                  enableSwipeDown\n                  saveToLocalByLongPress={false}\n                  onSwipeDown={() => {\n                    setShowZoomImageModal(false);\n                  }}\n                  imageUrls={[\n                    {\n                      // Simplest usage.\n                      url: location?.image as string,\n                      props: {\n                        style: { width: \"100%\", minHeight: 300 },\n                      },\n                    },\n                  ]}\n                />\n              </Modal>\n              {gameStatus === status.PENDING ? gameInputArea : gameCompleteArea}\n\n              <Modal\n                animationType=\"slide\"\n                transparent={false}\n                visible={modalVisible}\n                onDismiss={() => {}}\n              >\n                <View\n                  style={[\n                    styles.container,\n                    Platform.OS === \"ios\" ? { paddingTop: 50 } : null,\n                  ]}\n                >\n                  <View>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      Welcome To Where-dle\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      HOW TO PLAY:\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      Each City Is 6 Letters Long\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      Type In Your Guess\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      A <Text style={styles.wrong}>RED</Text> Letter Means That\n                      Letter Is NOT In The Word\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      An <Text style={styles.wrongLocation}>ORANGE</Text> Letter\n                      Means That Letter Is In The Word But Wrong Spot\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      A <Text style={styles.correct}>GREEN</Text> Letter Means\n                      That Letter Is Correct\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      You Can Tap On The Image To Open A Pop-Up To Zoom On The\n                      Image. Swipe Down To Close The Image\n                    </Text>\n                    <Text style={{ color: colorPallete.textLight }}>\n                      You Can Play Once Daily And Have 6 Tries To Win\n                    </Text>\n                    <Button\n                      text={\"Close Help\"}\n                      onPress={() => {\n                        setModalVisible(false);\n                      }}\n                    />\n                  </View>\n                </View>\n              </Modal>\n            </View>\n          </TouchableWithoutFeedback>\n        </ScrollView>\n      </View>\n    </SafeAreaView>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 10,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: \"900\",\n    alignSelf: \"center\",\n    color: colorPallete.textLight,\n  },\n  textGameOver: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  correct: {\n    color: \"green\",\n  },\n  wrongLocation: {\n    color: \"orange\",\n  },\n  wrong: {\n    color: \"red\",\n  },\n  helpText: {\n    alignSelf: \"center\",\n    color: colorPallete.pink,\n    fontSize: 18,\n    fontWeight: \"600\",\n    marginBottom: 10,\n  },\n  correctGameOver: {\n    color: \"green\",\n  },\n  wrongLocationGameOver: {\n    color: \"orange\",\n  },\n  wrongGameOver: {\n    color: \"red\",\n  },\n  textTimeLeftGameOver: {\n    color: \"lightblue\",\n  },\n});\n","import { useEffect, useState } from \"react\";\nimport { Platform, StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"../../components\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport colorPallete from \"../../constants/colors\";\n\nexport default function WinScreen() {\n  const [correctAnswer, setCa] = useState(\"\");\n  const [totalGuesses, setTg] = useState(\"\");\n  const [gameStatus, setGs] = useState(\"\");\n\n  const getData = async () => {\n    try {\n      const valueAnswer = await AsyncStorage.getItem(\"correctAnswer\");\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueStatus = await AsyncStorage.getItem(\"gameStatus\");\n      if (\n        valueAnswer !== null &&\n        valueGuesses !== null &&\n        valueStatus !== null\n      ) {\n        setCa(valueAnswer);\n        setTg(valueGuesses);\n        setGs(valueStatus);\n      }\n    } catch (e) {\n      // error reading value\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.text}>\n        Correct Answer:\n        <Text style={styles.correct}>{` ${correctAnswer}`}</Text>\n      </Text>\n      <Text style={styles.text}>\n        Total Guesses:\n        <Text style={styles.wrongLocation}>{` ${totalGuesses}`}</Text>\n      </Text>\n      <Button\n        text={\"TEMPORARY BUTTON TO RESET APP\"}\n        onPress={() => {\n          AsyncStorage.clear();\n          Platform.OS === \"web\" ? window.location.reload() : null;\n        }}\n      />\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 50,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  correct: {\n    color: \"green\",\n  },\n  wrongLocation: {\n    color: \"orange\",\n  },\n  wrong: {\n    color: \"red\",\n  },\n});\n","import \"react-native-gesture-handler\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nconst Stack = createStackNavigator();\nimport { HomeScreen, WinScreen } from \"./screens\";\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{ headerShown: false }}\n        initialRouteName={\"Home\"}\n      >\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Win\" component={WinScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}