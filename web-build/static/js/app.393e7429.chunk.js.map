{"version":3,"sources":["constants/colors.ts","components/button.tsx","components/keyboard.tsx","screens/home/home.tsx","screens/win-screen/win-screen.tsx","App.tsx","webpack:///./index.js?41f5"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","Keyboard","getKeyBGColor","key","toUpperCase","greenCaps","includes","orangeCaps","greyCaps","View","keyboard","Platform","OS","showKeyboard","hideKeyboard","keys","map","keyRow","i","row","onKeyPressed","ENTER","CLEAR","width","keyWidth","keyText","Dimensions","get","length","keyHeight","display","position","bottom","flexDirection","justifyContent","height","margin","alignItems","status","HomeScreen","navigation","useState","modalVisible","setModalVisible","guess","setGuess","autoCompleteData","setAutoCompleteData","setGreenCaps","setOrangeCaps","setGreyCaps","autoCompleteQuery","setAutoCompleteQuery","guessHistory","gameStatus","setGameStatus","canGuess","setCanGuess","timeTillNewGame","setTimeTillNewGame","totalGuesses","useRef","guessLength","spaceCount","answer","date","id","image","location","setLocation","inputRef","intervalRef","showZoomImageModal","setShowZoomImageModal","getTodaysDate","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","useEffect","showSubscription","addListener","dismiss","fullDate","a","async","AsyncStorage","getItem","checkIfPlayedToday","then","res","clear","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","parsedResponse","getChallengeFromDate","result","valueGuesses","valueGameStatus","valueStatus","current","getData","focus","setInterval","now","hoursleft","getHours","minutesleft","getMinutes","secondsleft","getSeconds","remove","split","slice","check","replace","city","checkIfInputIsRealCity","onSubmit","guessAccuracy","totalCorrect","currentGuess","locationDuringGuess","push","accuracy","setItem","Alert","alert","onShare","setTimeout","toShare","attempt","letter","j","emojis","join","shareMessageLine1","shareMessageLine2","shareMessageLine3","Share","share","message","action","sharedAction","activityType","dismissedAction","gameInputArea","data","value","onChangeText","renderTextInput","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","maxLength","editable","onKeyPress","e","keyCode","flatListProps","keyExtractor","_","idx","renderItem","item","index","cell","cellText","wrong","wrongLocation","correct","blackSquare","gameCompleteArea","textGameOver","correctGameOver","wrongLocationGameOver","textTimeLeftGameOver","SafeAreaView","container","ScrollView","paddingHorizontal","KeyboardAvoidingView","TouchableWithoutFeedback","blur","title","helpText","Image","minHeight","source","uri","Modal","visible","transparent","enableSwipeDown","saveToLocalByLongPress","onSwipeDown","imageUrls","url","animationType","onDismiss","paddingTop","flex","paddingBottom","letterSpacing","textAlign","borderWidth","borderColor","aspectRatio","guessTile","padding","marginBottom","wrongGameOver","WinScreen","correctAnswer","setCa","setTg","setGs","valueAnswer","window","reload","Stack","createStackNavigator","defaultProps","allowFontScaling","registerRootComponent","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.393e7429.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import {\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  Pressable,\n  View,\n  Dimensions,\n  Platform,\n} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Keyboard(props: {\n  onKeyPressed: (key: string) => void;\n  greenCaps: string[];\n  orangeCaps: string[];\n  greyCaps: string[];\n  visible: boolean;\n}) {\n  const getKeyBGColor = (key: string) => {\n    key = key.toUpperCase();\n    if (props.greenCaps.includes(key)) {\n      return \"green\";\n    }\n    if (props.orangeCaps.includes(key)) {\n      return \"orange\";\n    }\n    if (props.greyCaps.includes(key)) {\n      return \"#282828\";\n    }\n    return \"grey\";\n  };\n  return (\n    <View\n      style={[\n        styles.keyboard,\n        Platform.OS !== \"web\" ? styles.showKeyboard : styles.hideKeyboard,\n      ]}\n    >\n      {keys.map((keyRow, i) => (\n        <View style={styles.row} key={`row-${i}`}>\n          {keyRow.map((key) => (\n            <TouchableOpacity\n              onPress={() => props.onKeyPressed(key)}\n              //disabled={greyCaps.includes(key)}\n              key={key}\n              style={[\n                styles.key,\n                key === ENTER || key === CLEAR ? { width: keyWidth * 1.4 } : {},\n                { backgroundColor: getKeyBGColor(key) },\n              ]}\n            >\n              <Text style={styles.keyText}>{key.toUpperCase()}</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      ))}\n    </View>\n  );\n}\nconst ENTER = \"ENTER\";\nconst CLEAR = \"CLEAR\";\n\nconst keys = [\n  [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"],\n  [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"],\n  [ENTER, \"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\", CLEAR],\n];\nconst screenWidth = Dimensions.get(\"window\").width;\nexport const keyWidth = (screenWidth - 10) / keys[0].length;\nconst keyHeight = keyWidth * 1.3;\nconst styles = StyleSheet.create({\n  keyboard: {\n    alignSelf: \"stretch\",\n    marginTop: \"auto\",\n    backgroundColor: \"#191919\",\n  },\n  hideKeyboard: {\n    display: \"none\",\n  },\n  showKeyboard: {\n    position: \"absolute\",\n    bottom: 0,\n  },\n  row: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n  },\n  key: {\n    width: keyWidth - 4,\n    height: keyHeight - 4,\n    margin: 2,\n    borderRadius: 5,\n    backgroundColor: colorPallete.grey,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  keyText: {\n    color: colorPallete.textLight,\n    fontWeight: \"bold\",\n  },\n});\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Image,\n  Keyboard,\n  KeyboardAvoidingView,\n  Modal,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  Share,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n  Dimensions,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Button, Keyboard as CustomKeyboard } from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport { GuessableLocation } from \"../../constants/types\";\nimport ImageViewer from \"react-native-image-zoom-viewer\";\nimport Autocomplete from \"react-native-autocomplete-input\";\n\nconst status = {\n  WON: \"won\",\n  LOST: \"lost\",\n  PENDING: \"pending\",\n};\nexport default function HomeScreen({ navigation }: { navigation: any }) {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [showKeyboard, setShowKeyboard] = useState(false);\n  const [guess, setGuess] = useState(\"\");\n  const [autoCompleteData, setAutoCompleteData] = useState([]);\n  const [greenCaps, setGreenCaps] = useState([\"\"]);\n  const [orangeCaps, setOrangeCaps] = useState([\"\"]);\n  const [greyCaps, setGreyCaps] = useState([\"\"]);\n  const [autoCompleteQuery, setAutoCompleteQuery] = useState(\"\");\n  const [guessHistory, setGuessHistory] = useState<any[]>([]);\n  const [gameStatus, setGameStatus] = useState(status.PENDING);\n  const [canGuess, setCanGuess] = useState(false);\n  const [timeTillNewGame, setTimeTillNewGame] = useState(\"\");\n  const totalGuesses = useRef<any>(0);\n  const guessLength = useRef<number>(0);\n  const spaceCount = useRef<number>(0);\n  const [location, setLocation] = useState<GuessableLocation>({\n    answer: \"\",\n    date: \"\",\n    id: 0,\n    image: \"../../assets/loading.gif\",\n  });\n  const inputRef = useRef<any>();\n  const intervalRef = useRef<any>();\n  const [showZoomImageModal, setShowZoomImageModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueGameStatus = await AsyncStorage.getItem(\"gameStatus\");\n      const valueStatus = await AsyncStorage.getItem(\"lastPlayed\");\n      if (valueGuesses !== null && valueGameStatus !== null) {\n        totalGuesses.current = valueGuesses;\n        setGameStatus(valueGameStatus);\n      }\n      return valueStatus;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const getChallengeFromDate = async (date: string) => {\n    const rawResponse = await fetch(\n      \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/challenges\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ date }),\n      }\n    );\n    const parsedResponse = await rawResponse.json();\n    return parsedResponse[0];\n  };\n\n  const getTodaysDate = () => {\n    const today: Date = new Date();\n    const yyyy: string = today.getFullYear().toString();\n    const month: number = today.getMonth() + 1;\n    const day: number = today.getDate();\n    const mm: string = month < 10 ? \"0\" + month : \"\" + month;\n    const dd: string = day < 10 ? \"0\" + day : \"\" + day;\n    const fullDate = `${mm}/${dd}/${yyyy}`;\n    return fullDate;\n  };\n\n  const checkIfPlayedToday = async (fullDate: string) => {\n    return fullDate === (await AsyncStorage.getItem(\"lastPlayed\"));\n  };\n\n  useEffect(() => {\n    setGreenCaps([]);\n    setOrangeCaps([]);\n    setGreyCaps([]);\n    const showSubscription = Keyboard.addListener(\"keyboardWillShow\", () => {\n      Platform.OS !== \"web\" ? Keyboard.dismiss() : null;\n    });\n    const fullDate = getTodaysDate();\n    checkIfPlayedToday(fullDate).then((res) => {\n      if (!res) {\n        AsyncStorage.clear();\n      } else {\n      }\n      getChallengeFromDate(fullDate).then((result: GuessableLocation) => {\n        setLocation(result);\n        getData();\n        inputRef?.current?.focus();\n        intervalRef.current = setInterval(() => {\n          const now = new Date();\n          const hoursleft = 23 - now.getHours();\n          const minutesleft = 59 - now.getMinutes();\n          const secondsleft = 59 - now.getSeconds();\n          let minutesleftString = \"\";\n          let secondsleftString = \"\";\n          minutesleft < 10\n            ? (minutesleftString = \"0\" + minutesleft)\n            : (minutesleftString = \"\" + minutesleft);\n          secondsleft < 10\n            ? (secondsleftString = \"0\" + secondsleft)\n            : (secondsleftString = \"\" + secondsleft);\n          setTimeTillNewGame(\n            `${hoursleft}:${minutesleftString}:${secondsleftString}`\n          );\n        }, 1000);\n      });\n    });\n    return () => {\n      showSubscription.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    spaceCount.current = guess.split(\" \").length - 1;\n    guessLength.current = guess.length - spaceCount.current;\n    if (guessLength.current === 6 && gameStatus === status.PENDING) {\n      setCanGuess(true);\n    } else {\n      setAutoCompleteQuery(guess);\n      setGuess(guess.slice(0, 6 + spaceCount.current));\n      setCanGuess(false);\n    }\n  }, [guess]);\n\n  useEffect(() => {\n    const check = autoCompleteQuery.toUpperCase().replace(/[^A-Z]/g, \"\");\n    if (check === \"\" || check.length === 6) {\n      setAutoCompleteData([]);\n    } else {\n      fetch(\n        \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/autocomplete\",\n        {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ city: autoCompleteQuery }),\n        }\n      )\n        .then((res) => res.json())\n        .then((res) => {\n          setAutoCompleteData(res);\n        });\n    }\n  }, [autoCompleteQuery]);\n\n  const checkIfInputIsRealCity = async (city: string) => {\n    return await fetch(\n      \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/checkcity\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ city }),\n      }\n    );\n  };\n\n  const onSubmit = async () => {\n    Keyboard.dismiss();\n    checkIfInputIsRealCity(guess)\n      .then((result) => result.json())\n      .then((res) => {\n        if (res) {\n          const guessAccuracy = [];\n          const newGuessHistory = [];\n          let totalCorrect = 0;\n          const currentGuess = guess.toUpperCase().replace(/[^A-Z]/g, \"\");\n          let locationDuringGuess = location?.answer as string;\n\n          for (let i = 0; i < 6; i++) {\n            if (currentGuess[i] === locationDuringGuess[i]) {\n              guessAccuracy.push({\n                guess: currentGuess[i],\n                accuracy: \"correct\",\n              });\n              greenCaps.push(currentGuess[i]);\n              /*if (!greenCaps.includes(currentGuess[i])) {\n                const newGreenCaps = greenCaps;\n                newGreenCaps.push(currentGuess[i]);\n                setGreenCaps(newGreenCaps);\n              }*/\n              locationDuringGuess = locationDuringGuess.replace(\n                currentGuess[i],\n                \" \"\n              );\n              totalCorrect += 1;\n            } else if (locationDuringGuess.includes(currentGuess[i])) {\n              guessAccuracy.push({\n                guess: currentGuess[i],\n                accuracy: \"wrongLocation\",\n              });\n              orangeCaps.push(currentGuess[i]);\n              /*if (!orangeCaps.includes(currentGuess[i])) {\n                const newOrangeCaps = orangeCaps;\n                newOrangeCaps.push(currentGuess[i]);\n                setGreenCaps(newOrangeCaps);\n              }*/\n              locationDuringGuess = locationDuringGuess.replace(\n                currentGuess[i],\n                \" \"\n              );\n            } else {\n              greyCaps.push(currentGuess[i]);\n              /*if (!greyCaps.includes(currentGuess[i])) {\n                const newGreyCaps = greyCaps;\n                newGreyCaps.push(currentGuess[i]);\n                setGreenCaps(newGreyCaps);\n              }*/\n              guessAccuracy.push({ guess: currentGuess[i], accuracy: \"wrong\" });\n            }\n          }\n          guessHistory.push(guessAccuracy);\n          setGuess(\"\");\n          spaceCount.current = 0;\n          guessLength.current = 0;\n          totalGuesses.current += 1;\n          if (totalCorrect === 6) {\n            setGameStatus(status.WON);\n            AsyncStorage.setItem(\"gameStatus\", status.WON);\n            AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n            AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n            AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n            Alert.alert(\n              \"Congrats!!\",\n              `You Won After ${totalGuesses.current} Guesses.`,\n              [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n            );\n            //navigation.navigate('Win');\n            return;\n          }\n          if (totalCorrect !== 6 && totalGuesses.current === 6) {\n            setGameStatus(status.LOST);\n            AsyncStorage.setItem(\"gameStatus\", status.LOST);\n            AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n            AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n            AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n            Alert.alert(\n              \"Better Luck Next Time\",\n              `You Lost After ${totalGuesses.current} Guesses.`,\n              [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n            );\n            //navigation.navigate('Win');\n            return;\n          }\n          setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n              inputRef?.current?.focus();\n            }\n          }, 100);\n        } else {\n          if (Platform.OS !== \"web\") {\n            Alert.alert(`${guess} might not be a real city. please try again`);\n          } else {\n            alert(`${guess} might not be a real city. please try again`);\n          }\n\n          setGuess(\"\");\n          setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n              inputRef?.current?.focus();\n            }\n          }, 100);\n        }\n      });\n  };\n\n  const onShare = async () => {\n    const toShare = guessHistory\n      .map((attempt, i) => {\n        return attempt\n          .map(\n            (\n              letter: {\n                accuracy: \"wrong\" | \"wrongLocation\" | \"correct\";\n                guess: string;\n              },\n              j: number\n            ) => {\n              return emojis[letter.accuracy];\n            }\n          )\n          .join(\"\");\n      })\n      .join(\"\\n\");\n    try {\n      const shareMessageLine1 = `Wheredle: ${totalGuesses.current}/6 guesses\\n`;\n      const shareMessageLine2 = `${getTodaysDate()}\\n`;\n      const shareMessageLine3 = `${toShare}\\n`;\n      const shareMessageLine4 = `Play At wheredle.rogerenand.com\\n`;\n      const shareMessageLine5 = `Or find it in the app store and google play store`;\n\n      const result = await Share.share({\n        message: `${shareMessageLine1}${shareMessageLine2}${shareMessageLine3}${shareMessageLine4}${shareMessageLine5}`,\n      });\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const gameInputArea = (\n    <View>\n      {/*<TextInput\n        ref={inputRef}\n        style={styles.input}\n        placeholder={\"Guess The Location\"}\n        placeholderTextColor={\"#808e9b\"}\n        autoCapitalize={\"characters\"}\n        autoFocus={true}\n        value={guess}\n        maxLength={6 + spaceCount.current}\n        editable={gameStatus === status.PENDING}\n        onChangeText={(value: string) => {\n          value = value\n            .toUpperCase()\n            .slice(0, 6 + spaceCount.current)\n            .replace(/[^A-Z ]/g, \"\");\n          setGuess(value);\n        }}\n        onKeyPress={(e: any) => {\n          if (e.keyCode === 13 && canGuess) {\n            if (guess.length == 6) {\n              onSubmit();\n            } else {\n              setTimeout(() => {\n                inputRef?.current?.focus();\n              }, 100);\n            }\n          }\n        }}\n      />*/}\n      <Autocomplete\n        data={autoCompleteData}\n        value={autoCompleteQuery}\n        onChangeText={(text: string) => setAutoCompleteQuery(text)}\n        renderTextInput={() => (\n          <TextInput\n            ref={inputRef}\n            style={styles.input}\n            placeholder={\"Guess The Location\"}\n            placeholderTextColor={\"#808e9b\"}\n            autoCapitalize={\"characters\"}\n            autoFocus={true}\n            value={guess}\n            maxLength={6 + spaceCount.current}\n            editable={gameStatus === status.PENDING}\n            onChangeText={(value: string) => {\n              value = value\n                .toUpperCase()\n                .slice(0, 6 + spaceCount.current)\n                .replace(/[^A-Z ]/g, \"\");\n              setGuess(value);\n            }}\n            onKeyPress={(e: any) => {\n              if (e.keyCode === 13 && canGuess) {\n                if (guess.length == 6) {\n                  onSubmit();\n                } else {\n                  setTimeout(() => {\n                    inputRef?.current?.focus();\n                  }, 100);\n                }\n              }\n            }}\n          />\n        )}\n        flatListProps={{\n          keyExtractor: (_: any, idx: any) => idx,\n          renderItem: ({ item }: { item: string }) => (\n            //you can change the view you want to show in suggestions\n            <TouchableOpacity\n              onPress={() => {\n                setGuess(item);\n                setAutoCompleteQuery(item);\n                setAutoCompleteData([]);\n              }}\n            >\n              <Text>{item}</Text>\n            </TouchableOpacity>\n          ),\n        }}\n      />\n      <Button\n        disabled={!canGuess}\n        text={\"Submit\"}\n        onPress={() => {\n          if (guessLength.current === 6 && canGuess) {\n            onSubmit();\n          }\n        }}\n      />\n      <View>\n        {guessHistory.map(\n          (\n            guess: {\n              accuracy: \"correct\" | \"wrongLocation\" | \"wrong\";\n              guess: string;\n            }[],\n            index: number\n          ) => {\n            return (\n              <View key={index} style={styles.map}>\n                <View style={styles.row}>\n                  <View style={[styles.cell, styles[guess[0].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[0].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[1].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[1].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[2].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[2].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[3].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[3].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[4].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[4].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[5].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[5].guess}</Text>\n                  </View>\n                </View>\n              </View>\n            );\n          }\n        )}\n      </View>\n    </View>\n  );\n\n  const emojis = {\n    wrong: [\"\\u{1F7E5}\"],\n    wrongLocation: [\"\\u{1F7E7}\"],\n    correct: [\"\\u{1F7E9}\"],\n    blackSquare: [\"\\u{2B1B}\"],\n  };\n\n  const gameCompleteArea = (\n    <View style={{ marginTop: 20 }}>\n      <Text style={styles.textGameOver}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.textGameOver}>\n        Correct Answer:\n        <Text style={styles.correctGameOver}>{` ${location?.answer}`}</Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Total Guesses:\n        <Text style={styles.wrongLocationGameOver}>\n          {` ${totalGuesses.current}`}\n        </Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Time To New Game:\n        <Text style={styles.textTimeLeftGameOver}>{` ${timeTillNewGame}`}</Text>\n      </Text>\n      <View style={{ marginTop: 50 }}>\n        <Button text={\"Share Results\"} onPress={onShare} />\n      </View>\n      <View style={{ marginTop: 10 }}>\n        <Button\n          text={\"Clear Data\"}\n          onPress={() => {\n            AsyncStorage.clear();\n          }}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <View style={{ height: \"100%\" }}>\n        <ScrollView style={{ paddingHorizontal: 20 }}>\n          <KeyboardAvoidingView>\n            <TouchableWithoutFeedback\n              onPress={() => {\n                if (Platform.OS === \"web\") {\n                  inputRef?.current?.focus();\n                } else {\n                  inputRef?.current?.blur();\n                }\n              }}\n            >\n              <View style={[styles.container]}>\n                <Text style={styles.title}>WHEREDLE</Text>\n                <TouchableOpacity\n                  onPress={() => {\n                    setModalVisible(true);\n                  }}\n                >\n                  <Text style={styles.helpText}>How To Play?</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => {\n                    setShowZoomImageModal(true);\n                  }}\n                >\n                  <Image\n                    style={{ width: \"100%\", minHeight: 300 }}\n                    source={{ uri: location?.image }}\n                  />\n                </TouchableOpacity>\n\n                <Modal visible={showZoomImageModal} transparent={true}>\n                  <ImageViewer\n                    enableSwipeDown\n                    saveToLocalByLongPress={false}\n                    onSwipeDown={() => {\n                      setShowZoomImageModal(false);\n                    }}\n                    imageUrls={[\n                      {\n                        // Simplest usage.\n                        url: location?.image as string,\n                        props: {\n                          style: { width: \"100%\", minHeight: 300 },\n                        },\n                      },\n                    ]}\n                  />\n                </Modal>\n                {gameStatus === status.PENDING\n                  ? gameInputArea\n                  : gameCompleteArea}\n\n                <Modal\n                  animationType=\"slide\"\n                  transparent={false}\n                  visible={modalVisible}\n                  onDismiss={() => {}}\n                >\n                  <View\n                    style={[\n                      styles.container,\n                      Platform.OS === \"ios\" ? { paddingTop: 50 } : null,\n                    ]}\n                  >\n                    <View>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Welcome To Where-dle\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        HOW TO PLAY:\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Each City Is 6 Letters Long\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Type In Your Guess\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        A <Text style={styles.wrong}>RED</Text> Letter Means\n                        That Letter Is NOT In The Word\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        An <Text style={styles.wrongLocation}>ORANGE</Text>{\" \"}\n                        Letter Means That Letter Is In The Word But Wrong Spot\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        A <Text style={styles.correct}>GREEN</Text> Letter Means\n                        That Letter Is Correct\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        You Can Tap On The Image To Open A Pop-Up To Zoom On The\n                        Image. Swipe Down To Close The Image\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        You Can Play Once Daily And Have 6 Tries To Win\n                      </Text>\n                      <Button\n                        text={\"Close Help\"}\n                        onPress={() => {\n                          setModalVisible(false);\n                        }}\n                      />\n                    </View>\n                  </View>\n                </Modal>\n              </View>\n            </TouchableWithoutFeedback>\n          </KeyboardAvoidingView>\n        </ScrollView>\n        <CustomKeyboard\n          visible={showKeyboard}\n          onKeyPressed={(key) => {\n            if (key !== \"ENTER\" && key !== \"CLEAR\") {\n              setGuess(guess + key);\n            }\n            if (key === \"CLEAR\") {\n              setGuess(\"\");\n            }\n          }}\n          greenCaps={greenCaps}\n          orangeCaps={orangeCaps}\n          greyCaps={greyCaps}\n        />\n      </View>\n    </SafeAreaView>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 10,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n    paddingBottom: 200,\n  },\n  title: {\n    color: \"lightgrey\",\n    fontSize: 32,\n    fontWeight: \"bold\",\n    letterSpacing: 7,\n    textAlign: \"center\",\n  },\n  map: {\n    alignSelf: \"stretch\",\n  },\n  row: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n  },\n  cell: {\n    borderWidth: 3,\n    borderColor: \"grey\",\n    flex: 1,\n    aspectRatio: 1,\n    margin: 3,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  cellText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 30,\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: \"900\",\n    alignSelf: \"center\",\n    color: colorPallete.textLight,\n  },\n  textGameOver: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  guessTile: {\n    width: 10,\n    padding: 10,\n    borderColor: \"grey\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  correct: {\n    backgroundColor: \"green\",\n  },\n  wrongLocation: {\n    backgroundColor: \"orange\",\n  },\n  wrong: {\n    backgroundColor: \"#282828\",\n  },\n  helpText: {\n    alignSelf: \"center\",\n    color: colorPallete.pink,\n    fontSize: 18,\n    fontWeight: \"600\",\n    marginBottom: 10,\n  },\n  correctGameOver: {\n    color: \"green\",\n  },\n  wrongLocationGameOver: {\n    color: \"orange\",\n  },\n  wrongGameOver: {\n    color: \"red\",\n  },\n  textTimeLeftGameOver: {\n    color: \"lightblue\",\n  },\n});\n","import { useEffect, useState } from \"react\";\nimport { Platform, StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"../../components\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport colorPallete from \"../../constants/colors\";\n\nexport default function WinScreen() {\n  const [correctAnswer, setCa] = useState(\"\");\n  const [totalGuesses, setTg] = useState(\"\");\n  const [gameStatus, setGs] = useState(\"\");\n\n  const getData = async () => {\n    try {\n      const valueAnswer = await AsyncStorage.getItem(\"correctAnswer\");\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueStatus = await AsyncStorage.getItem(\"gameStatus\");\n      if (\n        valueAnswer !== null &&\n        valueGuesses !== null &&\n        valueStatus !== null\n      ) {\n        setCa(valueAnswer);\n        setTg(valueGuesses);\n        setGs(valueStatus);\n      }\n    } catch (e) {\n      // error reading value\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.text}>\n        Correct Answer:\n        <Text style={styles.correct}>{` ${correctAnswer}`}</Text>\n      </Text>\n      <Text style={styles.text}>\n        Total Guesses:\n        <Text style={styles.wrongLocation}>{` ${totalGuesses}`}</Text>\n      </Text>\n      <Button\n        text={\"TEMPORARY BUTTON TO RESET APP\"}\n        onPress={() => {\n          AsyncStorage.clear();\n          Platform.OS === \"web\" ? window.location.reload() : null;\n        }}\n      />\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 50,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  correct: {\n    color: \"green\",\n  },\n  wrongLocation: {\n    color: \"orange\",\n  },\n  wrong: {\n    color: \"red\",\n  },\n});\n","import \"react-native-gesture-handler\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nconst Stack = createStackNavigator();\nimport { HomeScreen, WinScreen } from \"./screens\";\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{ headerShown: false }}\n        initialRouteName={\"Home\"}\n      >\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Win\" component={WinScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import { registerRootComponent } from \"expo\";\n\nimport App from \"./App\";\nimport { Text } from \"react-native\";\nText.defaultProps = Text.defaultProps || {};\nText.defaultProps.allowFontScaling = false;\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}