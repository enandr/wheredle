{"version":3,"sources":["constants/colors.ts","components/button.tsx","constants/data.ts","screens/home/home.tsx","screens/login/login.tsx","App.tsx"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","data","location","date","answer","image","HomeScreen","useState","guess","setGuess","guessHistory","setLocation","inputRef","useRef","useEffect","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","fullDate","theLocation","find","current","focus","TouchableWithoutFeedback","View","container","Image","width","height","source","uri","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","value","maxLength","editable","onChangeText","toUpperCase","length","guessAccuracy","i","push","accuracy","includes","map","index","flex","paddingTop","paddingHorizontal","correct","wrongLocation","wrong","LoginScreen","Keyboard","dismiss","KeyboardAvoidingView","welcomeText","loginText","autoCompleteType","autoCorrect","keyboardType","textContentType","secureTextEntry","forgotPasswordText","signUpTextView","signUpText","aboutText","marginBottom","display","flexDirection","justifyContent","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.78528d70.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import {GuessableLocation} from \"./types\";\n\nlet data: GuessableLocation[] = [\n    {\n        location: 'Austin TX',\n        date: '03/27/2022',\n        answer: 'AUSTIN',\n        image: 'https://upload.wikimedia.org/wikipedia/commons/d/da/Austin_August_2019_19_%28skyline_and_Lady_Bird_Lake%29.jpg'\n    },\n    {\n        location: 'Boston MA',\n        date: '03/28/2022',\n        answer: 'BOSTON',\n        image: 'https://www.bu.edu/admissions/files/2018/07/17-2005-AERIALS-101-cropped-e1535295662889-3840x1200.jpg'\n    }\n]\nexport default data;","import {useState, useEffect, useRef} from 'react';\nimport {\n    Text,\n    View,\n    StyleSheet,\n    TouchableWithoutFeedback,\n    TextInput,\n    Image\n} from \"react-native\";\nimport {Button} from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport {GuessableLocation} from \"../../constants/types\";\nimport data from \"../../constants/data\";\n\nexport default function HomeScreen() {\n    const [guess, setGuess] = useState('');\n    const [guessHistory, setGuessHistory] = useState([]);\n    const [location, setLocation] = useState<GuessableLocation>({\n        location: '',\n        date: '',\n        answer: '',\n        image: ''\n    });\n    const inputRef  = useRef();\n    useEffect(() => {\n        const today: Date = new Date()\n        const yyyy: string = today.getFullYear().toString()\n        const month: number = today.getMonth() + 1;\n        const day: number = today.getDate();\n        const mm: string = month < 10 ? '0' + month : '' + month;\n        const dd: string = day < 10 ? '0' + day : '' + day;\n        const fullDate = `${mm}/${dd}/${yyyy}`;\n        const theLocation: GuessableLocation = data.find(location => location.date === fullDate)\n        setLocation(theLocation);\n        inputRef?.current?.focus();\n    },[])\n\n    return (\n        <TouchableWithoutFeedback\n            onPress={() => {\n                inputRef?.current?.focus();\n            }}\n        >\n            <View style={styles.container}>\n                <Image style={{width: '100%', height: '50%'}} source={{uri:location.image}}/>\n                <TextInput\n                    ref={inputRef}\n                    style={styles.input}\n                    placeholder={\"Guess The Location\"}\n                    placeholderTextColor={'#808e9b'}\n                    autoCapitalize={'characters'}\n                    autoFocus={true}\n                    value={guess}\n                    maxLength={6}\n                    editable={location.location !== ''}\n                    onChangeText={(value: string) => {\n                        value = value.toUpperCase();\n                        setGuess(value);\n                    }}\n                />\n                <Button\n                    disabled={guess.length !== 6}\n                    text={'Submit'}\n                    onPress={() => {\n                        const guessAccuracy = [];\n                        const newGuessHistory = [];\n                        for (let i = 0; i < 6; i++) {\n                            if (guess[i] === location.answer[i]) {\n                                guessAccuracy.push({guess: guess[i], accuracy: 'correct'});\n                            } else if (location.answer.includes(guess[i])) {\n                                guessAccuracy.push({guess: guess[i], accuracy: 'wrongLocation'});\n                            } else {\n                                guessAccuracy.push({guess: guess[i], accuracy: 'wrong'});\n                            }\n                        }\n                        guessHistory.push(guessAccuracy);\n                        setGuess('');\n                        inputRef?.current?.focus();\n                    }}\n                />\n                <View>\n                    {guessHistory.map((guess: any, index: number) => {\n                        return (\n                            <Text key={index} style={styles.text}>\n                                <Text style={styles[guess[0].accuracy]}>{guess[0].guess}</Text>\n                                <Text style={styles[guess[1].accuracy]}>{guess[1].guess}</Text>\n                                <Text style={styles[guess[2].accuracy]}>{guess[2].guess}</Text>\n                                <Text style={styles[guess[3].accuracy]}>{guess[3].guess}</Text>\n                                <Text style={styles[guess[4].accuracy]}>{guess[4].guess}</Text>\n                                <Text style={styles[guess[5].accuracy]}>{guess[5].guess}</Text>\n                            </Text>\n                        );\n                    })}\n                </View>\n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    text: {\n            fontSize: 30,\n            fontWeight:'900',\n            alignSelf: 'center',\n            color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    correct: {\n        color: 'green'\n    },\n    wrongLocation: {\n        color: 'orange',\n    },\n    wrong: {\n        color: 'red'\n    }\n});","import React from 'react';\nimport {\n    Text,\n    View,\n    StyleSheet,\n    KeyboardAvoidingView,\n    TouchableWithoutFeedback,\n    Keyboard,\n    TextInput\n} from \"react-native\";\nimport colorPallete from \"../../constants/colors\";\nimport {Button} from '../../components';\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\n\nexport default function LoginScreen() {\n    return (\n        <TouchableWithoutFeedback\n            onPress={() => {\n                Keyboard.dismiss();\n            }}\n        >\n            <KeyboardAvoidingView style={styles.container}>\n                <Text style={styles.welcomeText}>WHERE-DLE</Text>\n                <Text style={styles.loginText}>Login</Text>\n                <TextInput\n                    style={styles.input}\n                    placeholder={\"Email Address\"}\n                    placeholderTextColor={'#808e9b'}\n                    autoCapitalize={'none'}\n                    autoCompleteType={'email'}\n                    autoCorrect={true}\n                    keyboardType={'email-address'}\n                    textContentType={'emailAddress'}\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholder={\"Password\"}\n                    placeholderTextColor={'#808e9b'}\n                    secureTextEntry={true}\n                    textContentType={'password'}\n                />\n                <TouchableOpacity>\n                    <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n                </TouchableOpacity>\n                <Button text={'Login'}/>\n                {/*<TouchableOpacity style={styles.loginButton}>\n                    <Text style={styles.loginButtonText}>Login</Text>\n                </TouchableOpacity>*/}\n                <View style={styles.signUpTextView}>\n                    <Text style={styles.signUpText}>Don't have an account?</Text>\n                    <TouchableOpacity>\n                        <Text style={[styles.signUpText,{color: '#B53471'}]}> Sign Up</Text>\n                    </TouchableOpacity>\n                </View>\n                <Text style={styles.aboutText}>\n                    Where-dle is a fun daily guessing game where you have 6 chances to guess the correct location based on an image of a location.\n                </Text>\n            </KeyboardAvoidingView>\n        </TouchableWithoutFeedback>\n\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    welcomeText: {\n        fontSize: 30,\n        fontWeight:'900',\n        alignSelf: 'center',\n        color: colorPallete.textLight\n    },\n    loginText: {\n        fontSize: 28,\n        fontWeight: 'bold',\n        marginTop: 20,\n        marginBottom: 10,\n        color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    forgotPasswordText: {\n        alignSelf: 'flex-end',\n        color: colorPallete.pink,\n        fontSize: 18,\n        fontWeight: '600',\n        marginTop: 10\n    },\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    signUpTextView: {\n        marginTop: 40,\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    signUpText: {\n        color: colorPallete.textGrey,\n        fontSize: 20,\n        fontWeight: '500'\n    },\n    aboutText: {\n        color: colorPallete.textGrey,\n        fontSize: 15,\n        fontWeight: '500',\n        marginTop: 30\n    }\n\n});","import 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack'\nconst Stack = createStackNavigator();\nimport {HomeScreen,LoginScreen} from './screens';\n\n\nexport default function App() {\n  return (\n      <NavigationContainer>\n          <Stack.Navigator screenOptions={{headerShown: false}} initialRouteName={\"Home\"}>\n              <Stack.Screen name=\"Home\" component={HomeScreen} />\n              <Stack.Screen name=\"Login\" component={LoginScreen} />\n          </Stack.Navigator>\n      </NavigationContainer>\n\n\n  );\n}\n\n"],"sourceRoot":""}