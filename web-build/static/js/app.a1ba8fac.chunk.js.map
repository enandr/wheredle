{"version":3,"sources":["constants/colors.ts","components/button.tsx","constants/data.ts","screens/home/home.tsx","screens/login/login.tsx","screens/win-screen/win-screen.tsx","App.tsx"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","data","location","date","answer","image","status","HomeScreen","navigation","useState","guess","setGuess","guessHistory","gameStatus","setGameStatus","canGuess","setCanGuess","totalGuesses","useRef","setLocation","inputRef","getTodaysDate","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","useEffect","fullDate","theLocation","find","a","async","AsyncStorage","getItem","valueStatus","getData","then","result","clear","navigate","current","focus","length","onSubmit","guessAccuracy","totalCorrect","i","push","accuracy","includes","setItem","setTimeout","TouchableWithoutFeedback","View","container","Image","width","height","source","uri","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","value","maxLength","editable","onChangeText","toUpperCase","onKeyPress","e","keyCode","map","index","flex","paddingTop","paddingHorizontal","correct","wrongLocation","wrong","LoginScreen","Keyboard","dismiss","KeyboardAvoidingView","welcomeText","loginText","autoCompleteType","autoCorrect","keyboardType","textContentType","secureTextEntry","forgotPasswordText","signUpTextView","signUpText","aboutText","marginBottom","display","flexDirection","justifyContent","WinScreen","correctAnswer","setCa","setTg","setGs","valueAnswer","valueGuesses","Platform","OS","window","reload","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.a1ba8fac.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import {GuessableLocation} from \"./types\";\n\nlet data: GuessableLocation[] = [\n    {\n        location: 'Austin TX',\n        date: '03/27/2022',\n        answer: 'AUSTIN',\n        image: 'https://upload.wikimedia.org/wikipedia/commons/d/da/Austin_August_2019_19_%28skyline_and_Lady_Bird_Lake%29.jpg'\n    },\n    {\n        location: 'Boston MA',\n        date: '03/28/2022',\n        answer: 'BOSTON',\n        image: 'https://www.bu.edu/admissions/files/2018/07/17-2005-AERIALS-101-cropped-e1535295662889-3840x1200.jpg'\n    }\n]\nexport default data;","import {useState, useEffect, useRef} from 'react';\nimport {\n    Text,\n    View,\n    StyleSheet,\n    TouchableWithoutFeedback,\n    TextInput,\n    Image,\n    Alert\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {Button} from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport {GuessableLocation} from \"../../constants/types\";\nimport data from \"../../constants/data\";\nconst status = {\n    WON: 'won',\n    LOST: 'lost',\n    PENDING: 'pending'\n}\nexport default function HomeScreen({ navigation }) {\n    const [guess, setGuess] = useState('');\n    const [guessHistory, setGuessHistory] = useState([]);\n    const [gameStatus, setGameStatus] = useState(status.PENDING);\n    const [canGuess, setCanGuess] = useState(false);\n    const totalGuesses = useRef(0);\n    const [location, setLocation] = useState<GuessableLocation>({\n        location: '',\n        date: '',\n        answer: '',\n        image: ''\n    });\n    const inputRef  = useRef();\n    const getData = async () => {\n        try {\n            const valueStatus = await AsyncStorage.getItem('lastPlayed');\n            return valueStatus;\n        } catch(e) {\n            return null;\n        }\n    }\n    const getTodaysDate = () => {\n        const today: Date = new Date()\n        const yyyy: string = today.getFullYear().toString()\n        const month: number = today.getMonth() + 1;\n        const day: number = today.getDate();\n        const mm: string = month < 10 ? '0' + month : '' + month;\n        const dd: string = day < 10 ? '0' + day : '' + day;\n        const fullDate = `${mm}/${dd}/${yyyy}`;\n        return fullDate;\n    }\n    useEffect(() => {\n        const fullDate = getTodaysDate();\n        const theLocation: GuessableLocation = data.find(location => location.date === fullDate);\n        getData().then(result => {\n            if (result !== null && fullDate === result) {\n                navigation.navigate('Win');\n                return;\n            } else {\n                AsyncStorage.clear();\n            }\n        });\n        setLocation(theLocation);\n        inputRef?.current?.focus();\n    },[])\n    useEffect(() => {\n        if (guess.length === 6 && gameStatus === status.PENDING) {\n            setCanGuess(true);\n        } else {\n            setCanGuess(false);\n        }\n    },[guess])\n\n    const onSubmit = () => {\n        const guessAccuracy = [];\n        const newGuessHistory = [];\n        let totalCorrect = 0;\n        for (let i = 0; i < 6; i++) {\n            if (guess[i] === location.answer[i]) {\n                guessAccuracy.push({guess: guess[i], accuracy: 'correct'});\n                totalCorrect += 1;\n            } else if (location.answer.includes(guess[i])) {\n                guessAccuracy.push({guess: guess[i], accuracy: 'wrongLocation'});\n            } else {\n                guessAccuracy.push({guess: guess[i], accuracy: 'wrong'});\n            }\n        }\n        guessHistory.push(guessAccuracy);\n        setGuess('');\n        totalGuesses.current += 1;\n        if (totalCorrect === 6) {\n            setGameStatus(status.WON);\n            AsyncStorage.setItem('gameStatus', status.WON);\n            AsyncStorage.setItem('totalGuesses', totalGuesses.current + '');\n            AsyncStorage.setItem('correctAnswer', location.answer);\n            AsyncStorage.setItem('lastPlayed', getTodaysDate());\n            navigation.navigate('Win');\n        }\n        if (totalCorrect !== 6 && totalGuesses.current === 6) {\n            setGameStatus(status.LOST);\n            AsyncStorage.setItem('gameStatus', status.LOST);\n            AsyncStorage.setItem('totalGuesses', totalGuesses.current + '');\n            AsyncStorage.setItem('correctAnswer', location.answer);\n            AsyncStorage.setItem('lastPlayed', getTodaysDate());\n            navigation.navigate('Win');\n        }\n        setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n                inputRef?.current?.focus();\n            }\n        },100)\n    }\n    return (\n        <TouchableWithoutFeedback\n            onPress={() => {\n                inputRef?.current?.focus();\n            }}\n        >\n            <View style={styles.container}>\n                <Image style={{width: '100%', height: '50%'}} source={{uri:location.image}}/>\n                <TextInput\n                    ref={inputRef}\n                    style={styles.input}\n                    placeholder={\"Guess The Location\"}\n                    placeholderTextColor={'#808e9b'}\n                    autoCapitalize={'characters'}\n                    autoFocus={true}\n                    value={guess}\n                    maxLength={6}\n                    editable={location.location !== '' && gameStatus === status.PENDING}\n                    onChangeText={(value: string) => {\n                        value = value.toUpperCase();\n                        setGuess(value);\n                    }}\n                    onKeyPress={(e: any) => {\n                        if (e.keyCode === 13 && canGuess) {\n                            if (guess.length == 6) {\n                                onSubmit();\n                            } else {\n                                setTimeout(() => {\n                                    inputRef?.current?.focus();\n                                },100)\n                            }\n                        }\n                    }}\n                />\n                <Button\n                    disabled={!canGuess}\n                    text={'Submit'}\n                    onPress={() => {\n                        if (guess.length == 6 && canGuess) {\n                            onSubmit();\n                        }\n                    }}\n                />\n                <View>\n                    {guessHistory.map((guess: any, index: number) => {\n                        return (\n                            <Text key={index} style={styles.text}>\n                                <Text style={styles[guess[0].accuracy]}>{guess[0].guess}</Text>\n                                <Text style={styles[guess[1].accuracy]}>{guess[1].guess}</Text>\n                                <Text style={styles[guess[2].accuracy]}>{guess[2].guess}</Text>\n                                <Text style={styles[guess[3].accuracy]}>{guess[3].guess}</Text>\n                                <Text style={styles[guess[4].accuracy]}>{guess[4].guess}</Text>\n                                <Text style={styles[guess[5].accuracy]}>{guess[5].guess}</Text>\n                            </Text>\n                        );\n                    })}\n                </View>\n            </View>\n        </TouchableWithoutFeedback>\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    text: {\n            fontSize: 30,\n            fontWeight:'900',\n            alignSelf: 'center',\n            color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    correct: {\n        color: 'green'\n    },\n    wrongLocation: {\n        color: 'orange',\n    },\n    wrong: {\n        color: 'red'\n    }\n});","import React from 'react';\nimport {\n    Text,\n    View,\n    StyleSheet,\n    KeyboardAvoidingView,\n    TouchableWithoutFeedback,\n    Keyboard,\n    TextInput\n} from \"react-native\";\nimport colorPallete from \"../../constants/colors\";\nimport {Button} from '../../components';\nimport {TouchableOpacity} from \"react-native-gesture-handler\";\n\nexport default function LoginScreen() {\n    return (\n        <TouchableWithoutFeedback\n            onPress={() => {\n                Keyboard.dismiss();\n            }}\n        >\n            <KeyboardAvoidingView style={styles.container}>\n                <Text style={styles.welcomeText}>WHERE-DLE</Text>\n                <Text style={styles.loginText}>Login</Text>\n                <TextInput\n                    style={styles.input}\n                    placeholder={\"Email Address\"}\n                    placeholderTextColor={'#808e9b'}\n                    autoCapitalize={'none'}\n                    autoCompleteType={'email'}\n                    autoCorrect={true}\n                    keyboardType={'email-address'}\n                    textContentType={'emailAddress'}\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholder={\"Password\"}\n                    placeholderTextColor={'#808e9b'}\n                    secureTextEntry={true}\n                    textContentType={'password'}\n                />\n                <TouchableOpacity>\n                    <Text style={styles.forgotPasswordText}>Forgot Password?</Text>\n                </TouchableOpacity>\n                <Button text={'Login'}/>\n                {/*<TouchableOpacity style={styles.loginButton}>\n                    <Text style={styles.loginButtonText}>Login</Text>\n                </TouchableOpacity>*/}\n                <View style={styles.signUpTextView}>\n                    <Text style={styles.signUpText}>Don't have an account?</Text>\n                    <TouchableOpacity>\n                        <Text style={[styles.signUpText,{color: '#B53471'}]}> Sign Up</Text>\n                    </TouchableOpacity>\n                </View>\n                <Text style={styles.aboutText}>\n                    Where-dle is a fun daily guessing game where you have 6 chances to guess the correct location based on an image of a location.\n                </Text>\n            </KeyboardAvoidingView>\n        </TouchableWithoutFeedback>\n\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    welcomeText: {\n        fontSize: 30,\n        fontWeight:'900',\n        alignSelf: 'center',\n        color: colorPallete.textLight\n    },\n    loginText: {\n        fontSize: 28,\n        fontWeight: 'bold',\n        marginTop: 20,\n        marginBottom: 10,\n        color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    forgotPasswordText: {\n        alignSelf: 'flex-end',\n        color: colorPallete.pink,\n        fontSize: 18,\n        fontWeight: '600',\n        marginTop: 10\n    },\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    signUpTextView: {\n        marginTop: 40,\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    signUpText: {\n        color: colorPallete.textGrey,\n        fontSize: 20,\n        fontWeight: '500'\n    },\n    aboutText: {\n        color: colorPallete.textGrey,\n        fontSize: 15,\n        fontWeight: '500',\n        marginTop: 30\n    }\n\n});","import {useEffect, useState} from \"react\";\nimport {\n    Text,\n    View,\n    StyleSheet,\n    Platform\n} from \"react-native\";\nimport {Button} from \"../../components\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport colorPallete from \"../../constants/colors\";\nimport RNRestart from 'react-native-restart';\n\nexport default function WinScreen({ navigation }) {\n    const [correctAnswer, setCa] = useState('');\n    const [totalGuesses, setTg] = useState('');\n    const [gameStatus, setGs] = useState('');\n\n    /*let correctAnswer = '';\n    let totalGuesses = '';*/\n\n    const getData = async () => {\n        try {\n            const valueAnswer = await AsyncStorage.getItem('correctAnswer');\n            const valueGuesses = await AsyncStorage.getItem('totalGuesses');\n            const valueStatus = await AsyncStorage.getItem('gameStatus');\n            if(valueAnswer !== null && valueGuesses !== null && valueStatus !== null) {\n                setCa(valueAnswer);\n                setTg(valueGuesses);\n                setGs(valueStatus);\n            }\n        } catch(e) {\n            // error reading value\n        }\n    }\n    useEffect(() => {\n        getData();\n    },[])\n\n    return (\n       <View style={styles.container}>\n           <Text style={styles.text}>\n               {gameStatus === 'won' ? 'CONGRATULATIONS. YOU WON!!!!' : 'SORRY, YOU LOST'}\n           </Text>\n           <Text style={styles.text}>\n               Correct Answer:\n               <Text style={styles.correct}>\n                   {` ${correctAnswer}`}\n               </Text>\n\n           </Text>\n           <Text style={styles.text}>\n               Total Guesses:\n               <Text style={styles.wrongLocation}>\n                   {` ${totalGuesses}`}\n               </Text>\n           </Text>\n           {Platform.OS === 'web' ? (\n               <Button text={'TEMPORARY BUTTON TO RESET APP'} onPress={() => {\n                   AsyncStorage.clear();\n                   window.location.reload();\n               }}/>\n           ): null}\n\n       </View>\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    text: {\n        fontSize: 20,\n        fontWeight:'900',\n        alignSelf: 'flex-start',\n        color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    correct: {\n        color: 'green'\n    },\n    wrongLocation: {\n        color: 'orange',\n    },\n    wrong: {\n        color: 'red'\n    }\n});","import 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack'\nconst Stack = createStackNavigator();\nimport {HomeScreen,LoginScreen, WinScreen} from './screens';\n\n\nexport default function App() {\n  return (\n      <NavigationContainer>\n          <Stack.Navigator screenOptions={{headerShown: false}} initialRouteName={\"Home\"}>\n              <Stack.Screen name=\"Home\" component={HomeScreen} />\n              <Stack.Screen name=\"Login\" component={LoginScreen} />\n              <Stack.Screen name=\"Win\" component={WinScreen} />\n          </Stack.Navigator>\n      </NavigationContainer>\n\n\n  );\n}\n\n"],"sourceRoot":""}