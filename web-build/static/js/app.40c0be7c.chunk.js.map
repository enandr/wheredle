{"version":3,"sources":["constants/colors.ts","components/button.tsx","screens/home/home.tsx","screens/win-screen/win-screen.tsx","App.tsx","webpack:///./index.js?41f5"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","status","HomeScreen","navigation","useState","modalVisible","setModalVisible","guess","setGuess","guessHistory","gameStatus","setGameStatus","canGuess","setCanGuess","timeTillNewGame","setTimeTillNewGame","totalGuesses","useRef","guessLength","spaceCount","answer","date","id","image","location","setLocation","inputRef","intervalRef","showZoomImageModal","setShowZoomImageModal","getTodaysDate","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","useEffect","fullDate","a","async","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","parsedResponse","getChallengeFromDate","then","result","AsyncStorage","getItem","valueGuesses","valueGameStatus","valueStatus","current","getData","clear","focus","setInterval","now","hoursleft","getHours","minutesleft","getMinutes","secondsleft","getSeconds","split","length","checkIfInputIsRealCity","city","onSubmit","Keyboard","dismiss","res","guessAccuracy","totalCorrect","currentGuess","toUpperCase","replace","locationDuringGuess","i","push","accuracy","includes","setItem","Alert","alert","onShare","setTimeout","Platform","OS","toShare","map","attempt","letter","j","emojis","join","shareMessageLine1","shareMessageLine2","shareMessageLine3","Share","share","message","action","sharedAction","activityType","dismissedAction","gameInputArea","View","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","value","maxLength","editable","onChangeText","slice","onKeyPress","e","keyCode","index","row","cell","cellText","wrong","wrongLocation","correct","blackSquare","gameCompleteArea","textGameOver","correctGameOver","wrongLocationGameOver","textTimeLeftGameOver","SafeAreaView","container","height","ScrollView","paddingHorizontal","KeyboardAvoidingView","TouchableWithoutFeedback","blur","title","helpText","Image","width","minHeight","source","uri","Modal","visible","transparent","enableSwipeDown","saveToLocalByLongPress","onSwipeDown","imageUrls","url","animationType","onDismiss","paddingTop","flex","letterSpacing","textAlign","flexDirection","borderWidth","borderColor","aspectRatio","margin","alignItems","justifyContent","guessTile","padding","display","marginBottom","wrongGameOver","WinScreen","correctAnswer","setCa","setTg","setGs","valueAnswer","window","reload","Stack","createStackNavigator","registerRootComponent","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.40c0be7c.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Alert,\n  Image,\n  Keyboard,\n  KeyboardAvoidingView,\n  Modal,\n  Platform,\n  SafeAreaView,\n  ScrollView,\n  Share,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Button } from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport { GuessableLocation } from \"../../constants/types\";\nimport ImageViewer from \"react-native-image-zoom-viewer\";\n\nconst status = {\n  WON: \"won\",\n  LOST: \"lost\",\n  PENDING: \"pending\",\n};\nexport default function HomeScreen({ navigation }: { navigation: any }) {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [guess, setGuess] = useState(\"\");\n  const [guessHistory, setGuessHistory] = useState<any[]>([]);\n  const [gameStatus, setGameStatus] = useState(status.PENDING);\n  const [canGuess, setCanGuess] = useState(false);\n  const [timeTillNewGame, setTimeTillNewGame] = useState(\"\");\n  const totalGuesses = useRef<any>(0);\n  const guessLength = useRef<number>(0);\n  const spaceCount = useRef<number>(0);\n  const [location, setLocation] = useState<GuessableLocation>({\n    answer: \"\",\n    date: \"\",\n    id: 0,\n    image: \"../../assets/loading.gif\",\n  });\n  const inputRef = useRef<any>();\n  const intervalRef = useRef<any>();\n  const [showZoomImageModal, setShowZoomImageModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueGameStatus = await AsyncStorage.getItem(\"gameStatus\");\n      const valueStatus = await AsyncStorage.getItem(\"lastPlayed\");\n      if (valueGuesses !== null && valueGameStatus !== null) {\n        totalGuesses.current = valueGuesses;\n        setGameStatus(valueGameStatus);\n      }\n      return valueStatus;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const getChallengeFromDate = async (date: string) => {\n    const rawResponse = await fetch(\n      \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/challenges\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ date }),\n      }\n    );\n    const parsedResponse = await rawResponse.json();\n    return parsedResponse[0];\n  };\n\n  const getTodaysDate = () => {\n    const today: Date = new Date();\n    const yyyy: string = today.getFullYear().toString();\n    const month: number = today.getMonth() + 1;\n    const day: number = today.getDate();\n    const mm: string = month < 10 ? \"0\" + month : \"\" + month;\n    const dd: string = day < 10 ? \"0\" + day : \"\" + day;\n    const fullDate = `${mm}/${dd}/${yyyy}`;\n    return fullDate;\n  };\n\n  useEffect(() => {\n    const fullDate = getTodaysDate();\n    getChallengeFromDate(fullDate).then((result: GuessableLocation) => {\n      setLocation(result);\n      getData().then((result) => {\n        if (result !== null && fullDate === result) {\n          return;\n        } else {\n          AsyncStorage.clear();\n        }\n      });\n      inputRef?.current?.focus();\n      intervalRef.current = setInterval(() => {\n        const now = new Date();\n        const hoursleft = 23 - now.getHours();\n        const minutesleft = 59 - now.getMinutes();\n        const secondsleft = 59 - now.getSeconds();\n        let minutesleftString = \"\";\n        let secondsleftString = \"\";\n        minutesleft < 10\n          ? (minutesleftString = \"0\" + minutesleft)\n          : (minutesleftString = \"\" + minutesleft);\n        secondsleft < 10\n          ? (secondsleftString = \"0\" + secondsleft)\n          : (secondsleftString = \"\" + secondsleft);\n        setTimeTillNewGame(\n          `${hoursleft}:${minutesleftString}:${secondsleftString}`\n        );\n      }, 1000);\n    });\n  }, []);\n\n  useEffect(() => {\n    spaceCount.current = guess.split(\" \").length - 1;\n    guessLength.current = guess.length - spaceCount.current;\n    if (guessLength.current === 6 && gameStatus === status.PENDING) {\n      setCanGuess(true);\n    } else {\n      setCanGuess(false);\n    }\n  }, [guess]);\n\n  const checkIfInputIsRealCity = async (city: string) => {\n    return await fetch(\n      \"https://3hvzjclms6.execute-api.us-east-1.amazonaws.com/checkcity\",\n      {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ city }),\n      }\n    );\n  };\n  const onSubmit = async () => {\n    Keyboard.dismiss();\n    checkIfInputIsRealCity(guess)\n      .then((result) => result.json())\n      .then((res) => {\n        if (res) {\n          const guessAccuracy = [];\n          const newGuessHistory = [];\n          let totalCorrect = 0;\n          const currentGuess = guess.toUpperCase().replace(/[^A-Z]/g, \"\");\n          let locationDuringGuess = location?.answer as string;\n          for (let i = 0; i < 6; i++) {\n            if (currentGuess[i] === locationDuringGuess[i]) {\n              guessAccuracy.push({\n                guess: currentGuess[i],\n                accuracy: \"correct\",\n              });\n              locationDuringGuess = locationDuringGuess.replace(\n                currentGuess[i],\n                \" \"\n              );\n              totalCorrect += 1;\n            } else if (locationDuringGuess.includes(guess[i])) {\n              guessAccuracy.push({\n                guess: currentGuess[i],\n                accuracy: \"wrongLocation\",\n              });\n              locationDuringGuess = locationDuringGuess.replace(\n                currentGuess[i],\n                \" \"\n              );\n            } else {\n              guessAccuracy.push({ guess: currentGuess[i], accuracy: \"wrong\" });\n            }\n          }\n          guessHistory.push(guessAccuracy);\n          setGuess(\"\");\n          spaceCount.current = 0;\n          guessLength.current = 0;\n          totalGuesses.current += 1;\n          if (totalCorrect === 6) {\n            setGameStatus(status.WON);\n            AsyncStorage.setItem(\"gameStatus\", status.WON);\n            AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n            AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n            AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n            Alert.alert(\n              \"Congrats!!\",\n              `You Won After ${totalGuesses.current} Guesses.`,\n              [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n            );\n            //navigation.navigate('Win');\n            return;\n          }\n          if (totalCorrect !== 6 && totalGuesses.current === 6) {\n            setGameStatus(status.LOST);\n            AsyncStorage.setItem(\"gameStatus\", status.LOST);\n            AsyncStorage.setItem(\"totalGuesses\", totalGuesses.current + \"\");\n            AsyncStorage.setItem(\"correctAnswer\", location?.answer || \"\");\n            AsyncStorage.setItem(\"lastPlayed\", getTodaysDate());\n            Alert.alert(\n              \"Better Luck Next Time\",\n              `You Lost After ${totalGuesses.current} Guesses.`,\n              [{ text: \"Close\" }, { text: \"Share\", onPress: onShare }]\n            );\n            //navigation.navigate('Win');\n            return;\n          }\n          setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n              inputRef?.current?.focus();\n            }\n          }, 100);\n        } else {\n          if (Platform.OS !== \"web\") {\n            Alert.alert(`${guess} might not be a real city. please try again`);\n          } else {\n            alert(`${guess} might not be a real city. please try again`);\n          }\n\n          setGuess(\"\");\n          setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n              inputRef?.current?.focus();\n            }\n          }, 100);\n        }\n      });\n  };\n\n  const onShare = async () => {\n    const toShare = guessHistory\n      .map((attempt, i) => {\n        return attempt\n          .map(\n            (\n              letter: {\n                accuracy: \"wrong\" | \"wrongLocation\" | \"correct\";\n                guess: string;\n              },\n              j: number\n            ) => {\n              return emojis[letter.accuracy];\n            }\n          )\n          .join(\"\");\n      })\n      .join(\"\\n\");\n    try {\n      const shareMessageLine1 = `Wheredle: ${totalGuesses.current}/6 guesses\\n`;\n      const shareMessageLine2 = `${getTodaysDate()}\\n`;\n      const shareMessageLine3 = `${toShare}\\n`;\n      const shareMessageLine4 = `Play At wheredle.rogerenand.com\\n`;\n      const shareMessageLine5 = `Or find it in the app store and google play store`;\n\n      const result = await Share.share({\n        message: `${shareMessageLine1}${shareMessageLine2}${shareMessageLine3}${shareMessageLine4}${shareMessageLine5}`,\n      });\n      if (result.action === Share.sharedAction) {\n        if (result.activityType) {\n          // shared with activity type of result.activityType\n        } else {\n          // shared\n        }\n      } else if (result.action === Share.dismissedAction) {\n        // dismissed\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const gameInputArea = (\n    <View>\n      <TextInput\n        ref={inputRef}\n        style={styles.input}\n        placeholder={\"Guess The Location\"}\n        placeholderTextColor={\"#808e9b\"}\n        autoCapitalize={\"characters\"}\n        autoFocus={true}\n        value={guess}\n        maxLength={6 + spaceCount.current}\n        editable={gameStatus === status.PENDING}\n        onChangeText={(value: string) => {\n          value = value\n            .toUpperCase()\n            .slice(0, 6 + spaceCount.current)\n            .replace(/[^A-Z ]/g, \"\");\n          setGuess(value);\n        }}\n        onKeyPress={(e: any) => {\n          if (e.keyCode === 13 && canGuess) {\n            if (guess.length == 6) {\n              onSubmit();\n            } else {\n              setTimeout(() => {\n                inputRef?.current?.focus();\n              }, 100);\n            }\n          }\n        }}\n      />\n      <Button\n        disabled={!canGuess}\n        text={\"Submit\"}\n        onPress={() => {\n          if (guessLength.current === 6 && canGuess) {\n            onSubmit();\n          }\n        }}\n      />\n      <View>\n        {guessHistory.map(\n          (\n            guess: {\n              accuracy: \"correct\" | \"wrongLocation\" | \"wrong\";\n              guess: string;\n            }[],\n            index: number\n          ) => {\n            return (\n              <View key={index} style={styles.map}>\n                <View style={styles.row}>\n                  <View style={[styles.cell, styles[guess[0].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[0].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[1].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[1].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[2].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[2].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[3].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[3].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[4].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[4].guess}</Text>\n                  </View>\n                  <View style={[styles.cell, styles[guess[5].accuracy]]}>\n                    <Text style={styles.cellText}>{guess[5].guess}</Text>\n                  </View>\n                </View>\n              </View>\n\n              /*<Text key={index} style={styles.text}>\n                <Text style={[styles.guessTile, styles[guess[0].accuracy]]}>\n                  {guess[0].guess}\n                </Text>\n                <Text style={[styles.guessTile, styles[guess[1].accuracy]]}>\n                  {guess[1].guess}\n                </Text>\n                <Text style={[styles.guessTile, styles[guess[2].accuracy]]}>\n                  {guess[2].guess}\n                </Text>\n                <Text style={[styles.guessTile, styles[guess[3].accuracy]]}>\n                  {guess[3].guess}\n                </Text>\n                <Text style={[styles.guessTile, styles[guess[4].accuracy]]}>\n                  {guess[4].guess}\n                </Text>\n                <Text style={[styles.guessTile, styles[guess[5].accuracy]]}>\n                  {guess[5].guess}\n                </Text>\n              </Text>*/\n            );\n          }\n        )}\n      </View>\n    </View>\n  );\n\n  const emojis = {\n    wrong: [\"\\u{1F7E5}\"],\n    wrongLocation: [\"\\u{1F7E7}\"],\n    correct: [\"\\u{1F7E9}\"],\n    blackSquare: [\"\\u{2B1B}\"],\n  };\n\n  const gameCompleteArea = (\n    <View style={{ marginTop: 20 }}>\n      <Text style={styles.textGameOver}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.textGameOver}>\n        Correct Answer:\n        <Text style={styles.correctGameOver}>{` ${location?.answer}`}</Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Total Guesses:\n        <Text style={styles.wrongLocationGameOver}>\n          {` ${totalGuesses.current}`}\n        </Text>\n      </Text>\n      <Text style={styles.textGameOver}>\n        Time To New Game:\n        <Text style={styles.textTimeLeftGameOver}>{` ${timeTillNewGame}`}</Text>\n      </Text>\n      <View style={{ marginTop: 50 }}>\n        <Button text={\"Share Results\"} onPress={onShare} />\n      </View>\n      <View style={{ marginTop: 10 }}>\n        <Button\n          text={\"Clear Data\"}\n          onPress={() => {\n            AsyncStorage.clear();\n          }}\n        />\n      </View>\n    </View>\n  );\n\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <View style={{ height: \"100%\" }}>\n        <ScrollView style={{ paddingHorizontal: 20 }}>\n          <KeyboardAvoidingView>\n            <TouchableWithoutFeedback\n              onPress={() => {\n                if (Platform.OS === \"web\") {\n                  inputRef?.current?.focus();\n                } else {\n                  inputRef?.current?.blur();\n                }\n              }}\n            >\n              <View style={[styles.container]}>\n                <Text style={styles.title}>WHEREDLE</Text>\n                <TouchableOpacity\n                  onPress={() => {\n                    setModalVisible(true);\n                  }}\n                >\n                  <Text style={styles.helpText}>How To Play?</Text>\n                </TouchableOpacity>\n                <TouchableOpacity\n                  onPress={() => {\n                    setShowZoomImageModal(true);\n                  }}\n                >\n                  <Image\n                    style={{ width: \"100%\", minHeight: 300 }}\n                    source={{ uri: location?.image }}\n                  />\n                </TouchableOpacity>\n\n                <Modal visible={showZoomImageModal} transparent={true}>\n                  <ImageViewer\n                    enableSwipeDown\n                    saveToLocalByLongPress={false}\n                    onSwipeDown={() => {\n                      setShowZoomImageModal(false);\n                    }}\n                    imageUrls={[\n                      {\n                        // Simplest usage.\n                        url: location?.image as string,\n                        props: {\n                          style: { width: \"100%\", minHeight: 300 },\n                        },\n                      },\n                    ]}\n                  />\n                </Modal>\n                {gameStatus === status.PENDING\n                  ? gameInputArea\n                  : gameCompleteArea}\n\n                <Modal\n                  animationType=\"slide\"\n                  transparent={false}\n                  visible={modalVisible}\n                  onDismiss={() => {}}\n                >\n                  <View\n                    style={[\n                      styles.container,\n                      Platform.OS === \"ios\" ? { paddingTop: 50 } : null,\n                    ]}\n                  >\n                    <View>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Welcome To Where-dle\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        HOW TO PLAY:\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Each City Is 6 Letters Long\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        Type In Your Guess\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        A <Text style={styles.wrong}>RED</Text> Letter Means\n                        That Letter Is NOT In The Word\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        An <Text style={styles.wrongLocation}>ORANGE</Text>{\" \"}\n                        Letter Means That Letter Is In The Word But Wrong Spot\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        A <Text style={styles.correct}>GREEN</Text> Letter Means\n                        That Letter Is Correct\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        You Can Tap On The Image To Open A Pop-Up To Zoom On The\n                        Image. Swipe Down To Close The Image\n                      </Text>\n                      <Text style={{ color: colorPallete.textLight }}>\n                        You Can Play Once Daily And Have 6 Tries To Win\n                      </Text>\n                      <Button\n                        text={\"Close Help\"}\n                        onPress={() => {\n                          setModalVisible(false);\n                        }}\n                      />\n                    </View>\n                  </View>\n                </Modal>\n              </View>\n            </TouchableWithoutFeedback>\n          </KeyboardAvoidingView>\n        </ScrollView>\n      </View>\n    </SafeAreaView>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 10,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n  },\n  title: {\n    color: \"lightgrey\",\n    fontSize: 32,\n    fontWeight: \"bold\",\n    letterSpacing: 7,\n    textAlign: \"center\",\n  },\n  map: {\n    alignSelf: \"stretch\",\n  },\n  row: {\n    alignSelf: \"stretch\",\n    flexDirection: \"row\",\n  },\n  cell: {\n    borderWidth: 3,\n    borderColor: \"grey\",\n    flex: 1,\n    aspectRatio: 1,\n    margin: 3,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  cellText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    fontSize: 30,\n  },\n  text: {\n    fontSize: 30,\n    fontWeight: \"900\",\n    alignSelf: \"center\",\n    color: colorPallete.textLight,\n  },\n  textGameOver: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  guessTile: {\n    width: 10,\n    padding: 10,\n    borderColor: \"grey\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  correct: {\n    backgroundColor: \"green\",\n  },\n  wrongLocation: {\n    backgroundColor: \"orange\",\n  },\n  wrong: {\n    backgroundColor: \"red\",\n  },\n  helpText: {\n    alignSelf: \"center\",\n    color: colorPallete.pink,\n    fontSize: 18,\n    fontWeight: \"600\",\n    marginBottom: 10,\n  },\n  correctGameOver: {\n    color: \"green\",\n  },\n  wrongLocationGameOver: {\n    color: \"orange\",\n  },\n  wrongGameOver: {\n    color: \"red\",\n  },\n  textTimeLeftGameOver: {\n    color: \"lightblue\",\n  },\n});\n","import { useEffect, useState } from \"react\";\nimport { Platform, StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"../../components\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport colorPallete from \"../../constants/colors\";\n\nexport default function WinScreen() {\n  const [correctAnswer, setCa] = useState(\"\");\n  const [totalGuesses, setTg] = useState(\"\");\n  const [gameStatus, setGs] = useState(\"\");\n\n  const getData = async () => {\n    try {\n      const valueAnswer = await AsyncStorage.getItem(\"correctAnswer\");\n      const valueGuesses = await AsyncStorage.getItem(\"totalGuesses\");\n      const valueStatus = await AsyncStorage.getItem(\"gameStatus\");\n      if (\n        valueAnswer !== null &&\n        valueGuesses !== null &&\n        valueStatus !== null\n      ) {\n        setCa(valueAnswer);\n        setTg(valueGuesses);\n        setGs(valueStatus);\n      }\n    } catch (e) {\n      // error reading value\n    }\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n        {gameStatus === \"won\"\n          ? \"CONGRATULATIONS. YOU WON!!!!\"\n          : \"SORRY, YOU LOST\"}\n      </Text>\n      <Text style={styles.text}>\n        Correct Answer:\n        <Text style={styles.correct}>{` ${correctAnswer}`}</Text>\n      </Text>\n      <Text style={styles.text}>\n        Total Guesses:\n        <Text style={styles.wrongLocation}>{` ${totalGuesses}`}</Text>\n      </Text>\n      <Button\n        text={\"TEMPORARY BUTTON TO RESET APP\"}\n        onPress={() => {\n          AsyncStorage.clear();\n          Platform.OS === \"web\" ? window.location.reload() : null;\n        }}\n      />\n    </View>\n  );\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 50,\n    paddingHorizontal: 20,\n    backgroundColor: colorPallete.darkGrey,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"900\",\n    alignSelf: \"flex-start\",\n    color: colorPallete.textLight,\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: colorPallete.grey,\n    borderRadius: 6,\n    marginTop: 10,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    color: colorPallete.black,\n  },\n  correct: {\n    color: \"green\",\n  },\n  wrongLocation: {\n    color: \"orange\",\n  },\n  wrong: {\n    color: \"red\",\n  },\n});\n","import \"react-native-gesture-handler\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nconst Stack = createStackNavigator();\nimport { HomeScreen, WinScreen } from \"./screens\";\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        screenOptions={{ headerShown: false }}\n        initialRouteName={\"Home\"}\n      >\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Win\" component={WinScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}