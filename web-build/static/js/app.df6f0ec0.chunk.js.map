{"version":3,"sources":["constants/colors.ts","components/button.tsx","constants/data.ts","screens/home/home.tsx","screens/win-screen/win-screen.tsx","App.tsx"],"names":["colorPallete","darkGrey","grey","pink","purple","black","textLight","textGrey","Button","props","TouchableOpacity","onPress","style","styles","loginButton","disabled","disabledButton","Text","loginButtonText","text","StyleSheet","create","backgroundColor","paddingVertical","borderRadius","marginTop","fontSize","fontWeight","color","alignSelf","data","location","date","answer","image","status","HomeScreen","navigation","useState","modalVisible","setModalVisible","guess","setGuess","guessHistory","gameStatus","setGameStatus","canGuess","setCanGuess","timeTillNewGame","setTimeTillNewGame","totalGuesses","useRef","guessLength","spaceCount","setLocation","inputRef","intervalRef","getTodaysDate","today","Date","yyyy","getFullYear","toString","month","getMonth","day","getDate","useEffect","fullDate","theLocation","find","undefined","a","async","AsyncStorage","getItem","valueGuesses","valueGameStatus","valueStatus","current","getData","then","result","clear","focus","setInterval","now","hoursleft","getHours","minutesleft","getMinutes","secondsleft","getSeconds","split","length","onSubmit","Keyboard","dismiss","guessAccuracy","totalCorrect","currentGuess","toUpperCase","replace","i","push","accuracy","includes","setItem","setTimeout","SafeAreaView","container","TouchableWithoutFeedback","Platform","OS","blur","View","helpText","Image","width","height","source","uri","TextInput","ref","input","placeholder","placeholderTextColor","autoCapitalize","autoFocus","value","maxLength","editable","onChangeText","slice","onKeyPress","e","keyCode","map","index","textGameOver","correctGameOver","wrongLocationGameOver","textTimeLeftGameOver","Modal","animationType","transparent","visible","onDismiss","paddingTop","flex","paddingHorizontal","correct","wrongLocation","wrong","marginBottom","wrongGameOver","WinScreen","correctAnswer","setCa","setTg","setGs","valueAnswer","window","reload","Stack","createStackNavigator","App","NavigationContainer","Navigator","screenOptions","headerShown","initialRouteName","Screen","name","component"],"mappings":"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","file":"static/js/app.df6f0ec0.chunk.js","sourcesContent":["const colorPallete = {\n    darkGrey: '#191919',\n    grey: '#CCC9DC',\n    pink: '#DF367C',\n    purple: '#9A0680',\n    black: '#000',\n    textLight: '#fafafa',\n    textGrey: '#808e9b'\n};\nexport default colorPallete;","import {Text, TouchableOpacity, StyleSheet} from \"react-native\";\nimport React from \"react\";\nimport colorPallete from \"../constants/colors\";\n\nexport default function Button(props: {\n    text: string,\n    type?: 'normal' | 'text',\n    style?: StyleSheet,\n    disabled?: boolean,\n    onPress?: () => void\n}) {\n    return (\n        <TouchableOpacity onPress={props.onPress} style={[styles.loginButton, props.disabled ? styles.disabledButton : null]} disabled={props.disabled}>\n            <Text style={styles.loginButtonText}>{props.text}</Text>\n        </TouchableOpacity>\n    )\n}\nconst styles = StyleSheet.create({\n    loginButton: {\n        backgroundColor: colorPallete.purple,\n        paddingVertical: 12,\n        borderRadius: 6,\n        marginTop: 20\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: '500',\n        color: colorPallete.textLight,\n        alignSelf: 'center'\n    },\n    disabledButton: {\n        backgroundColor: 'lightgrey',\n    }\n});","import {GuessableLocation} from \"./types\";\n\nlet data: GuessableLocation[] = [\n    {\n        location: 'Austin TX',\n        date: '03/27/2022',\n        answer: 'AUSTIN',\n        image: 'https://upload.wikimedia.org/wikipedia/commons/d/da/Austin_August_2019_19_%28skyline_and_Lady_Bird_Lake%29.jpg'\n    },\n    {\n        location: 'Boston',\n        date: '03/28/2022',\n        answer: 'BOSTON',\n        image: 'https://www.bu.edu/admissions/files/2018/07/17-2005-AERIALS-101-cropped-e1535295662889-3840x1200.jpg'\n    },\n    {\n        location: 'El Paso',\n        date: '03/29/2022',\n        answer: 'ELPASO',\n        image: 'https://www.schoolestate.com/wp-content/uploads/2017/10/el-paso-texas.jpg'\n    },\n    {\n        location: 'Denver',\n        date: '03/30/2022',\n        answer: 'DENVER',\n        image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Denver_skyline.jpg/1920px-Denver_skyline.jpg'\n    },\n    {\n        location: 'Dallas',\n        date: '03/31/2022',\n        answer: 'DALLAS',\n        image: 'https://visitdallas.imgix.net/blog/12_December/Skyline.jpg?w=1600&h=580&q=40&fit=fill&crop=edges,faces&fm=pjpg&dpr=3&auto=compress,format,redeye&trim=auto?or=0&q=60&crop=faces%2Centropy%2Ccenter&auto=format&fm=jpg&fit=crop&w=641&h=408'\n    },\n    {\n        location: 'Mobile',\n        date: '04/01/2022',\n        answer: 'MOBILE',\n        image: 'https://www.worldatlas.com/r/w1300-q80/upload/2d/40/0a/shutterstock-698740108.jpg'\n    },\n]\nexport default data;","import React, {useState, useEffect, useRef} from 'react';\nimport {\n    Text,\n    View,\n    StyleSheet,\n    TouchableWithoutFeedback,\n    TextInput,\n    Image,\n    TouchableOpacity,\n    Modal,\n    Platform,\n    SafeAreaView, Keyboard\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {Button} from \"../../components\";\nimport colorPallete from \"../../constants/colors\";\nimport {GuessableLocation} from \"../../constants/types\";\nimport data from \"../../constants/data\";\nconst status = {\n    WON: 'won',\n    LOST: 'lost',\n    PENDING: 'pending'\n}\nexport default function HomeScreen({navigation}: {navigation: any}) {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [guess, setGuess] = useState('');\n    const [guessHistory, setGuessHistory] = useState<any[]>([]);\n    const [gameStatus, setGameStatus] = useState(status.PENDING);\n    const [canGuess, setCanGuess] = useState(false);\n    const [timeTillNewGame, setTimeTillNewGame] = useState('');\n    const totalGuesses = useRef<any>(0);\n    const guessLength = useRef<number>(0);\n    const spaceCount = useRef<number>(0);\n    const [location, setLocation] = useState<GuessableLocation>({\n        location: '',\n        date: '',\n        answer: '',\n        image: '../../assets/loading.gif'\n    });\n    const inputRef = useRef<any>();\n    const intervalRef = useRef<any>();\n    const getData = async () => {\n        try {\n            const valueGuesses = await AsyncStorage.getItem('totalGuesses');\n            const valueGameStatus = await AsyncStorage.getItem('gameStatus');\n            const valueStatus = await AsyncStorage.getItem('lastPlayed');\n            if(valueGuesses !== null && valueGameStatus !== null) {\n                totalGuesses.current = valueGuesses;\n                setGameStatus(valueGameStatus);\n            }\n            return valueStatus;\n        } catch(e) {\n            return null;\n        }\n    }\n    const getTodaysDate = () => {\n        const today: Date = new Date()\n        const yyyy: string = today.getFullYear().toString()\n        const month: number = today.getMonth() + 1;\n        const day: number = today.getDate();\n        const mm: string = month < 10 ? '0' + month : '' + month;\n        const dd: string = day < 10 ? '0' + day : '' + day;\n        const fullDate = `${mm}/${dd}/${yyyy}`;\n        return fullDate;\n    }\n    useEffect(() => {\n        const fullDate = getTodaysDate();\n        const theLocation: GuessableLocation = data.find(location => location ? location.date === fullDate : undefined);\n        getData().then(result => {\n            if (result !== null && fullDate === result) {\n                //navigation.navigate('Win');\n                return;\n            } else {\n                AsyncStorage.clear();\n            }\n        });\n        setLocation(theLocation);\n        inputRef?.current?.focus();\n        intervalRef.current = setInterval(() => {\n            const now = new Date();\n            const hoursleft = 23-now.getHours();\n            const minutesleft = 59-now.getMinutes();\n            const secondsleft = 59-now.getSeconds();\n            let minutesleftString = '';\n            let secondsleftString = '';\n            minutesleft < 10 ? minutesleftString = '0' + minutesleft : minutesleftString = '' + minutesleft;\n            secondsleft < 10 ? secondsleftString = '0' + secondsleft : secondsleftString = '' + secondsleft;\n            setTimeTillNewGame(`${hoursleft}:${minutesleftString}:${secondsleftString}`);\n        },1000)\n    },[])\n    useEffect(() => {\n        spaceCount.current = (guess.split(\" \").length - 1);\n        guessLength.current = guess.length - spaceCount.current;\n        if (guessLength.current === 6 && gameStatus === status.PENDING) {\n            setCanGuess(true);\n        } else {\n            setCanGuess(false);\n        }\n    },[guess])\n\n    const onSubmit = () => {\n        Keyboard.dismiss();\n        const guessAccuracy = [];\n        const newGuessHistory = [];\n        let totalCorrect = 0;\n        const currentGuess = guess.toUpperCase().replace(/[^A-Z]/g, \"\")\n        for (let i = 0; i < 6; i++) {\n            if (currentGuess[i] === location?.answer[i]) {\n                guessAccuracy.push({guess: currentGuess[i], accuracy: 'correct'});\n                totalCorrect += 1;\n            } else if (location?.answer.includes(guess[i])) {\n                guessAccuracy.push({guess: currentGuess[i], accuracy: 'wrongLocation'});\n            } else {\n                guessAccuracy.push({guess: currentGuess[i], accuracy: 'wrong'});\n            }\n        }\n        guessHistory.push(guessAccuracy);\n        setGuess('');\n        spaceCount.current = 0\n        guessLength.current = 0;\n        totalGuesses.current += 1;\n        if (totalCorrect === 6) {\n            setGameStatus(status.WON);\n            AsyncStorage.setItem('gameStatus', status.WON);\n            AsyncStorage.setItem('totalGuesses', totalGuesses.current + '');\n            AsyncStorage.setItem('correctAnswer', location?.answer || '');\n            AsyncStorage.setItem('lastPlayed', getTodaysDate());\n            //navigation.navigate('Win');\n            return;\n        }\n        if (totalCorrect !== 6 && totalGuesses.current === 6) {\n            setGameStatus(status.LOST);\n            AsyncStorage.setItem('gameStatus', status.LOST);\n            AsyncStorage.setItem('totalGuesses', totalGuesses.current + '');\n            AsyncStorage.setItem('correctAnswer', location?.answer || '');\n            AsyncStorage.setItem('lastPlayed', getTodaysDate());\n            //navigation.navigate('Win');\n            return;\n        }\n        setTimeout(() => {\n            if (gameStatus === status.PENDING) {\n                inputRef?.current?.focus();\n            }\n        },100)\n    }\n    return (\n        <SafeAreaView style={[styles.container]}>\n            <TouchableWithoutFeedback\n                onPress={() => {\n                    if (Platform.OS === 'web') {\n                        inputRef?.current?.focus();\n                    } else {\n                        inputRef?.current?.blur();\n                    }\n                }}\n            >\n                <View style={[styles.container]}>\n                    <TouchableOpacity onPress={() => {\n                        setModalVisible(true);\n                    }}>\n                        <Text style={styles.helpText}>How To Play?</Text>\n                    </TouchableOpacity>\n\n                    <Image style={{width: '100%', height: '50%'}} source={{uri:location?.image}}/>\n                    {gameStatus === status.PENDING ? (\n                        <View>\n                            <TextInput\n                                ref={inputRef}\n                                style={styles.input}\n                                placeholder={\"Guess The Location\"}\n                                placeholderTextColor={'#808e9b'}\n                                autoCapitalize={'characters'}\n                                autoFocus={true}\n                                value={guess}\n                                maxLength={6 + spaceCount.current}\n                                editable={location?.location !== '' && gameStatus === status.PENDING}\n                                onChangeText={(value: string) => {\n                                    value = value.toUpperCase().slice(0,6 + spaceCount.current).replace(/[^A-Z ]/g, \"\");\n                                    setGuess(value);\n                                }}\n                                onKeyPress={(e: any) => {\n                                    if (e.keyCode === 13 && canGuess) {\n                                        if (guess.length == 6) {\n                                            onSubmit();\n                                        } else {\n                                            setTimeout(() => {\n                                                inputRef?.current?.focus();\n                                            },100)\n                                        }\n                                    }\n                                }}\n                            />\n                            <Button\n                                disabled={!canGuess}\n                                text={'Submit'}\n                                onPress={() => {\n                                    if (guessLength.current === 6 && canGuess) {\n                                        onSubmit();\n                                    }\n                                }}\n                            />\n                            <View>\n                                {guessHistory.map((guess: {accuracy: 'correct' | 'wrongLocation' | 'wrong', guess: string}[], index: number) => {\n                                    return (\n                                        <Text key={index} style={styles.text}>\n                                            <Text style={styles[guess[0].accuracy]}>{guess[0].guess}</Text>\n                                            <Text style={styles[guess[1].accuracy]}>{guess[1].guess}</Text>\n                                            <Text style={styles[guess[2].accuracy]}>{guess[2].guess}</Text>\n                                            <Text style={styles[guess[3].accuracy]}>{guess[3].guess}</Text>\n                                            <Text style={styles[guess[4].accuracy]}>{guess[4].guess}</Text>\n                                            <Text style={styles[guess[5].accuracy]}>{guess[5].guess}</Text>\n                                        </Text>\n                                    );\n                                })}\n                            </View>\n                        </View>\n                    ) : (\n                        <View style={{marginTop: 20}}>\n                        <Text style={styles.textGameOver}>\n                            {gameStatus === 'won' ? 'CONGRATULATIONS. YOU WON!!!!' : 'SORRY, YOU LOST'}\n                        </Text>\n                        <Text style={styles.textGameOver}>\n                            Correct Answer:\n                            <Text style={styles.correctGameOver}>\n                                {` ${location?.answer}`}\n                            </Text>\n                        </Text>\n                        <Text style={styles.textGameOver}>\n                            Total Guesses:\n                            <Text style={styles.wrongLocationGameOver}>\n                                {` ${totalGuesses.current}`}\n                            </Text>\n                        </Text>\n                            <Text style={styles.textGameOver}>\n                                Time To New Game:\n                                <Text style={styles.textTimeLeftGameOver}>\n                                    {` ${timeTillNewGame}`}\n                                </Text>\n                            </Text>\n                    </View>)}\n                    <Modal\n                        animationType=\"slide\"\n                        transparent={false}\n                        visible={modalVisible}\n                        onDismiss={() => {\n                        }}>\n                        <View  style={[styles.container, Platform.OS === 'ios' ? {paddingTop: 50} : null]}>\n                            <View>\n                                <Text style={{color: colorPallete.textLight}}>Welcome To Where-dle</Text>\n                                <Text style={{color: colorPallete.textLight}}>HOW TO PLAY:</Text>\n                                <Text style={{color: colorPallete.textLight}}>Each City Is 6 Letters Long</Text>\n                                <Text style={{color: colorPallete.textLight}}>Type In Your Guess</Text>\n                                <Text style={{color: colorPallete.textLight}}>A RED Letter Means That Letter Is NOT In The Word</Text>\n                                <Text style={{color: colorPallete.textLight}}>An ORANGE Letter Means That Letter Is In The Word But Wrong Spot</Text>\n                                <Text style={{color: colorPallete.textLight}}>A GREEN Letter Means That Letter Is Correct</Text>\n                                <Text style={{color: colorPallete.textLight}}>You Can Play Once Daily And Have 6 Tries To Win</Text>\n                                <Button text={'Close Help'} onPress={\n                                    () => {\n                                        setModalVisible(false)}\n                                } />\n                            </View>\n                        </View>\n                    </Modal>\n                </View>\n            </TouchableWithoutFeedback>\n        </SafeAreaView>\n\n\n\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 10,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    text: {\n        fontSize: 30,\n        fontWeight:'900',\n        alignSelf: 'center',\n        color: colorPallete.textLight\n    },\n    textGameOver: {\n        fontSize: 20,\n        fontWeight:'900',\n        alignSelf: 'flex-start',\n        color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    correct: {\n        color: 'green'\n    },\n    wrongLocation: {\n        color: 'orange',\n    },\n    wrong: {\n        color: 'red'\n    },\n    helpText: {\n        alignSelf: 'center',\n        color: colorPallete.pink,\n        fontSize: 18,\n        fontWeight: '600',\n        marginBottom: 10\n    },\n    correctGameOver: {\n        color: 'green'\n    },\n    wrongLocationGameOver: {\n        color: 'orange',\n    },\n    wrongGameOver: {\n        color: 'red'\n    },\n    textTimeLeftGameOver: {\n        color: 'lightblue'\n    }\n});","import {useEffect, useState} from \"react\";\nimport {\n    Text,\n    View,\n    StyleSheet,\n    Platform\n} from \"react-native\";\nimport {Button} from \"../../components\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport colorPallete from \"../../constants/colors\";\n\nexport default function WinScreen() {\n    const [correctAnswer, setCa] = useState('');\n    const [totalGuesses, setTg] = useState('');\n    const [gameStatus, setGs] = useState('');\n\n    const getData = async () => {\n        try {\n            const valueAnswer = await AsyncStorage.getItem('correctAnswer');\n            const valueGuesses = await AsyncStorage.getItem('totalGuesses');\n            const valueStatus = await AsyncStorage.getItem('gameStatus');\n            if(valueAnswer !== null && valueGuesses !== null && valueStatus !== null) {\n                setCa(valueAnswer);\n                setTg(valueGuesses);\n                setGs(valueStatus);\n            }\n        } catch(e) {\n            // error reading value\n        }\n    }\n    useEffect(() => {\n        getData();\n    },[])\n\n    return (\n       <View style={styles.container}>\n           <Text style={styles.text}>\n               {gameStatus === 'won' ? 'CONGRATULATIONS. YOU WON!!!!' : 'SORRY, YOU LOST'}\n           </Text>\n           <Text style={styles.text}>\n               Correct Answer:\n               <Text style={styles.correct}>\n                   {` ${correctAnswer}`}\n               </Text>\n           </Text>\n           <Text style={styles.text}>\n               Total Guesses:\n               <Text style={styles.wrongLocation}>\n                   {` ${totalGuesses}`}\n               </Text>\n           </Text>\n               <Button text={'TEMPORARY BUTTON TO RESET APP'} onPress={() => {\n                   AsyncStorage.clear();\n                   Platform.OS === 'web' ? window.location.reload() : null;\n               }}/>\n\n       </View>\n    )\n}\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 50,\n        paddingHorizontal: 20,\n        backgroundColor: colorPallete.darkGrey\n    },\n    text: {\n        fontSize: 20,\n        fontWeight:'900',\n        alignSelf: 'flex-start',\n        color: colorPallete.textLight\n    },\n    input: {\n        width: '100%',\n        height: 50,\n        backgroundColor: colorPallete.grey,\n        borderRadius: 6,\n        marginTop: 10,\n        paddingHorizontal: 10,\n        fontSize: 16,\n        color: colorPallete.black\n    },\n    correct: {\n        color: 'green'\n    },\n    wrongLocation: {\n        color: 'orange',\n    },\n    wrong: {\n        color: 'red'\n    }\n});","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack'\nconst Stack = createStackNavigator();\nimport {HomeScreen, WinScreen} from './screens';\n\n\nexport default function App() {\n  return (\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{headerShown: false}} initialRouteName={\"Home\"}>\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Win\" component={WinScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n\n\n  );\n}"],"sourceRoot":""}